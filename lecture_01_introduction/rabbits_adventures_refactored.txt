# Originally created by: Jenna Netland
# All images and music are Copyright (c) 2012 All Rights Reserved, Jenna Netland

import math
import random
import simplegui
import urllib2
import codeskulptor

def deserialize(string, splitters=[' ', ';', ',']):
    lst = []
    for sub_str in string.split(splitters[0]):
        if not sub_str:
            break
        elif sub_str[0] == 'T':
            lst.append(True)
        elif sub_str[0] == 'F':
            lst.append(False)
        elif sub_str[0] == 'N':
            lst.append(None)
        elif sub_str[0] == '[' and sub_str[-1] == ']':
            lst.append(deserialize(sub_str[1:-1], splitters[1:]))
        elif sub_str[0] == '"' and sub_str[-1] == '"':
            lst.append(sub_str[1:-1].replace('_', ' '))
        else:
            lst.append(float(sub_str))
    return lst

    
def _inside_rect(point, rect):
    if not ((rect[0][0] <= point[0] <= rect[1][0]) or (rect[0][0] >= point[0] >= rect[1][0])):
        return False
    if not ((rect[0][1] <= point[1] <= rect[1][1]) or (rect[0][1] >= point[1] >= rect[1][1])):
        return False
    return True


class Menu:
    def __init__(self, screen, buttons = []):
        self.buttons = buttons
        self.screen = screen
            
    def draw(self, canvas):
        canvas.draw_image(self.screen, [450, 300], [900, 600], [450, 300], [900, 600], 0)
        for b in self.buttons:
            b.draw(canvas)
                   
    def click(self, pos):
        for b in self.buttons:
            b.activate_if_in(pos)
                
class Image:
    def __init__(self, image, image_center, src_size, dest_size, dest_shift=[0,0], tile_skip=[0,0]):
        self.image = image
        self.image_center = image_center
        self.src_size = src_size
        self.dest_size = dest_size
        self.dest_shift = dest_shift
        self.tile_skip = tile_skip
        
    def draw(self, canvas, pos, tile=[0, 0], rot=0):
        canvas.draw_image(self.image, [self.image_center[0] + tile[0] * self.tile_skip[0], self.image_center[1] + tile[1] * self.tile_skip[1]], self.src_size, [pos[0] + self.dest_shift[0], pos[1] + self.dest_shift[1]], self.dest_size, rot)

      
class Button:
    def __init__(self, pos, image, image_center, image_size, action):
        self.pos = pos
        self.action = action
        d = [image_size[0] / 2, image_size[1] / 2]
        self._rect = [[pos[0] + d[0], pos[1] + d[1]], [pos[0] - d[0], pos[1] - d[1]]]
        self._image = Image(image, image_center, image_size, image_size)

    def draw(self, canvas):
        self._image.draw(canvas, self.pos)
        
    def activate_if_in(self, pos):
        if _inside_rect(pos, self._rect):
            self.action()


class Treat():
    def __init__(self, pos, image_center, image_size, image_radius, color, platforms, collected = False):
        self.platforms = platforms
        self.collected = collected
        self.color = color
        self.pos = pos
        self.radius = image_radius
        
        _img = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Carrots.png"))
        self.image = Image(_img, [image_center[0] + color * (image_size[0]+1), image_center[1]], image_size, [image_size[0] * 1.2, image_size[1] * 1.2])
        
    def get_color(self):
        return self.color
    
    def get_pos(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def is_collected(self):
        return self.collected
    
    def collect(self):
        self.collected = True
        for p in self.platforms:
            p.activate()
                
    def drop(self):
        self.collected = False
        for p in self.platforms:
            p.restore_state()
                
    def draw(self, canvas, offset, visible = False):
        if not self.collected or visible:
            self.image.draw(canvas, [self.pos[0] + offset[0], self.pos[1] + offset[1]])

    
class Platform():
    def __init__(self, points, vel, image_center, image_size, interval, color, active = False, on = True):
        self.active = active
        self.on = on
        self.orig_state = [active, on]
        self.interval = interval
        self.time = 0
        self.vel = vel
        self.pos = [( points[0][0] + points[1][0])/2.0, ( points[0][1] + points[1][1])/2.0]
        self.d   = [(-points[0][0] + points[1][0])/2.0, (-points[0][1] + points[1][1])/2.0]

        image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png"))
        self._image_center = Image(image, [image_center[0] + color * image_size[0], image_center[1]], [image_size[0] - 12, image_size[1]], [2 * self.d[0], image_size[1]], [0, image_size[1] / 2.0], [0, image_size[1]])
        self._image_left   = Image(image, [3  + color * image_size[0], image_center[1]], [6, image_size[1]], [6, image_size[1]], [0, image_size[1] / 2.0], [image_size[0], image_size[1]])
        self._image_right  = Image(image, [image_size[0] - 3 + color * image_size[0], image_center[1]], [6, image_size[1]], [6, image_size[1]], [0, image_size[1]/2], [image_size[0], image_size[1]])
                
    def update(self):
        self.time = (self.time + self.active) % (2 * self.interval)
        self.pos[0] += self.active * self.vel[0] * (-1) ** (self.time // self.interval)
        self.pos[1] += self.active * self.vel[1] * (-1) ** (self.time // self.interval)
            
    def get_rect(self):
        return [[self.pos[0] - self.d[0], self.pos[1] - self.d[1]], [self.pos[0] + self.d[0], self.pos[1] + self.d[1]]]
    
    def draw(self, canvas, offset):
        self._image_center.draw(canvas, [self.pos[0] + offset[0], self.pos[1] + offset[1]], [0, not self.on])
        self._image_left.draw(canvas, [self.pos[0] - self.d[0] + offset[0], self.pos[1] - self.d[1] + offset[1]], [0, not self.on])
        self._image_right.draw(canvas, [self.pos[0] + self.d[0] + offset[0], self.pos[1] + self.d[1] + offset[1]], [0, not self.on])
        
    def activate(self):
        self.active = True
        self.on = True
        
    def restore_state(self):
        self.active = self.orig_state[0]
        self.on = self.orig_state[1]
        
    def get_x_vel(self):
        return self.vel[0] * (-1) ** (self.time // self.interval)

    
class Sparkles():
    def __init__(self, rotation_speed = 0):
        self.rotation_speed = rotation_speed
        self.t = 0
        self.pos = [0, 0]
       
        _paths = [codeskulptor.file2url("assets-bunnyadventure-Menu_Image_" + color + "Sparkles.png") for color in ["", "Red", "Blue"]]
        self.sparkles = [(Image(simplegui.load_image(i), [34, 35], [70, 70], [105, 105], tile_skip=[70, 0])) for i in _paths]
        self.rots = [0.0, math.pi / 3.0, 2.0 * math.pi / 3.0]        
    
    def draw(self, canvas, offset):
        for sparkle, _r in zip(self.sparkles, self.rots):
            sparkle.draw(canvas, [self.pos[0] + offset[0], self.pos[1] + offset[1]], [(self.t // 3) % 7, 0], rot = self.t * self.rotation_speed + _r)
            sparkle.draw(canvas, [self.pos[0] + offset[0], self.pos[1] + offset[1]], [(3 + self.t // 3) % 7, 0], rot = self.t * self.rotation_speed + .9 + _r)
        self.t = (self.t + 1) % 21000
            
    def set_pos(self, pos):
        self.pos = pos
    
    
class CarrotBox:
    def __init__(self, complete_func):
        self.carrots = []
        self.won_level = complete_func
        
    def collect(self, carrot):
        self.carrots.append(carrot)
        carrot.collect()
        if len(self.carrots) > 2:
            self.drop()
        if carrot.get_color() == 0:
            self.won_level(carrot.get_pos())
            
    def drop(self):
        if len(self.carrots) >= 1:
            self.carrots[0].drop()
            self.carrots = self.carrots[1:]
            
    def draw(self, canvas):
        canvas.draw_polygon([(25, 30), (100, 30), (100, 70), (25, 70)], 5, "White")
        for c,i in zip(self.carrots, range(len(self.carrots))):
            c.draw(canvas, [44 + 35 * i - c.get_pos()[0], 50 - c.get_pos()[1]], True)
    
    
class Animal():
    def __init__(self, pos, vel, gravity, speed, jump_height, direction, scale, complete_func):
        self.gravity = gravity
        self.speed = speed
        self.jump_height = jump_height
        self.direction = direction
        self.relative_vel = 0
        self.num_jumps = 0
        self.max_jumps = 2
        self.tile = [0, 0]
        self.pos = pos
        self.vel = vel
        self.radius = 21
        _image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Bunnies.png"))
        self._image = Image(_image, [22, 26], [45, 52], [45, 52], tile_skip=[45, 52])
        self._carrot_box = CarrotBox(complete_func)
    
    def with_platform(self, platform):
        rect = platform.get_rect()
        rect[1][1]  = rect[0][1] - self.radius - self.vel[1] - 1
        if platform.on and self.vel[1] > 0 and _inside_rect(self.pos, rect):
            self.pos[1] = rect[0][1] - 1 - self.radius
            self.vel[1] = 0
            if platform.active:
                self.relative_vel = platform.get_x_vel()
            self.num_jumps = 0

    def with_carrot(self, carrot):
        d = math.sqrt((self.pos[0] - carrot.get_pos()[0]) ** 2 + (self.pos[1] - carrot.get_pos()[1]) ** 2)
        if d < self.radius + carrot.get_radius() and not carrot.is_collected():
            self._carrot_box.collect(carrot)
            
    def get_pos(self):
        return self.pos        
    
    def move(self):
        self.vel[1] += self.gravity
        self.vel[0]  = self.direction * self.speed + self.relative_vel
        self.relative_vel = 0
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
    
    def jump(self):
        if self.num_jumps < self.max_jumps:
            self.vel[1] = -math.sqrt(math.fabs(2 * self.gravity * self.jump_height))
            self.num_jumps += 1

    def draw(self, canvas, offset, _cnt=[0]):
        self.tile[1] = [1, self.tile[1], 0][1 + self.direction]
        _cnt[0] = (_cnt[0] + 1) % 9            
        if self.num_jumps > 0:
            self.tile[0] = [1, 0, 2][int(self.vel[1] > 0) - (self.vel[1] < 0) + 1]
        else:
            self.tile[0] = [0, (self.tile[0] + _cnt[0] // 8) % 3][self.direction != 0]        
        self._image.draw(canvas, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.tile)
        self._carrot_box.draw(canvas)
        
    def key_handler(self, key_state):
        self.direction = int(key_state['right']) - int(key_state['left'])
        if key_state['up']:
            key_state['up'] = False
            self.jump()
        if key_state['space']:
            key_state['space'] = False
            self._carrot_box.drop()

            
class Screen:
    def __init__(self):
        _easy = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Easy.png"))
        _medium = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Medium.png"))
        _hard = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Hard.png"))
        self._screens = [Image(screen, [450, 300], [900, 600], [900, 600]) for screen in [_easy, _medium, _hard]]
        self._screen = self._screens[0]
        
    def set_level(self, level):
        self._screen = self._screens[int(10 < level) + int(20 < level)]
    
    def draw(self, canvas):
        self._screen.draw(canvas, [450, 300])

        
class Game:
    def __init__(self, level, pause_callback, win_callback):
        self.animal = None
        self.sparkles = Sparkles(.05)
        self.camera_offset = [0, 0]
        self.levels = []
        self.level = level
        self.treats = []
        self.platforms = []
        self.text = None
        self.screen = Screen()
        self.is_ending = False
        self._pause_callback = pause_callback
        self._win = win_callback

        self.create_levels()
        self.get_level()
    
    def create_levels(self):
        self.levels = []
        a_file = urllib2.urlopen('https://raw.githubusercontent.com/fbeilstein/machine_learning/master/lecture_01_and_lecture_02_intro_and_python/levels.txt')
        data = a_file.read().split('L')
        for level in data:
            if len(level) > 2:
                self.levels.append(level)
                
    def level_complete(self, sparkle_pos):
        self.sparkles.set_pos(sparkle_pos)
        self.is_ending = True
        self._win(self.level >= len(self.levels) - 1)
    
    def update(self):
        if self.is_ending:
            return
        
        self.animal.move()
        for p in self.platforms:
            self.animal.with_platform(p)
            p.update()
        for t in self.treats:
            self.animal.with_carrot(t)
            
        p = self.animal.get_pos()
        self.camera_offset = [450 - p[0], 300 - p[1]]
        if p[1] > 999:  # condition to lose level
            self.get_level()

    
    def draw(self, canvas):
        self.update()
        
        # Scene
        self.screen.draw(canvas)
        if self.text[0] != None:
            canvas.draw_text(self.text[0], [self.text[1][0] + self.camera_offset[0], self.text[1][1] + self.camera_offset[1]], self.text[2], self.text[3])
        
        # Objects
        self.animal.draw(canvas, self.camera_offset)
        for p in self.platforms:
            p.draw(canvas, self.camera_offset)
        for t in self.treats:
            t.draw(canvas, self.camera_offset)

        # Text
        canvas.draw_text("Level: " + str(self.level), [110, 70], 40, "White")
        
        # Sparkles
        if self.is_ending:
            self.sparkles.draw(canvas, self.camera_offset)
            
    def next_level(self):
        self.is_ending = False
        if self.level < len(self.levels) - 1:
            self.level += 1
            self.get_level()
        self.screen.set_level(self.level)
    
    def get_level(self):
        self.is_ending = False
        self.animal    = Animal([450, 300], [0,0], .5, 3, 120, 0, 1, self.level_complete)
        self.treats    = []
        self.platforms = []
        self.in_level  = True
        level_str = self.levels[self.level]
        for objs in level_str.split('\n'):
            if len(objs) < 1:
                pass
            elif objs[0] == 'P':
                params = deserialize(objs[2:])
                self.platforms.append(Platform(params[0], params[1], params[2], params[3], params[4], params[5], params[6], params[7]))
            elif objs[0] == 'C':
                params = deserialize(objs[2:])
                p = [self.platforms[int(idx)] for idx in params[5]]
                self.treats.append(Treat(params[0], params[1], params[2], params[3], params[4], p))
            elif objs[0] == 'T':
                self.text = deserialize(objs[2:])

    def key(self, state):
        if state['p']:
            self._pause_callback()
        self.animal.key_handler(state)
     
class PuzzleGame():
    def __init__(self, level):
        self._game = Game(level, self.pause, self.win_level)
        
        button_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Buttons.png"))        
        next_button = Button([625, 350], button_image, [625, 50], [251, 100], self.next_level)
        replay_button = Button([275, 350], button_image, [375, 50], [251, 100], self.replay_level)
        resume_button = Button([300, 350], button_image, [3875, 50], [251, 100], self.unpause)

        paused_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Pause.png"))
        level_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelWin.png"))
        final_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_AllWin.png"))
        self.level_menu = Menu(level_screen_image, [replay_button, next_button])
        self.final_menu = Menu(final_screen_image, [replay_button])
        self.pause_menu = Menu(paused_screen_image,[resume_button])

        self._key_state = {'left':False, 'right':False, 'up':False, 'space':False, 'p':False}
        self._forwards = {'play':  {'draw': self._game.draw, 'key':self._game.key, 'mouse': lambda _: None}, 
                          'next':  {'draw': self.level_menu.draw, 'key':lambda _: None, 'mouse': self.level_menu.click}, 
                          'pause': {'draw': self.pause_menu.draw, 'key':lambda _: None, 'mouse': self.pause_menu.click}}
        self._forward = self._forwards['play']
        
        self._ending_timer = simplegui.create_timer(1000, self.menu_next)
        
    def win_level(self, is_last):
        self._ending_timer.start()
        if is_last:
            self.level_menu = self.final_menu

    def menu_next(self):
        self._ending_timer.stop()
        self._forward = self._forwards['next']
        
    def next_level(self):
        self._forward = self._forwards['play']
        self._game.next_level()

    def replay_level(self):
        self._game.get_level()
        self._forward = self._forwards['play']
        
    def unpause(self):
        self._forward = self._forwards['play']
        
    def pause(self):
        self._forward = self._forwards['pause']
        
    def main(self, canvas):
        self._forward['draw'](canvas)
        
    def keydown_handler(self, key):
        self._key_state = dict([(k, self._key_state[k] or (key == simplegui.KEY_MAP[k])) for k in self._key_state.keys()])
        self._forward['key'](self._key_state)
    
    def keyup_handler(self, key):
        self._key_state = dict([(k, self._key_state[k] and (key != simplegui.KEY_MAP[k])) for k in self._key_state.keys()])
        self._forward['key'](self._key_state)
        
    def click(self, pos):
        self._forward['mouse'](pos)

        
frame = simplegui.create_frame("Bunny's Big Adventure!", 900, 600, 100)

_puzzle_game = PuzzleGame(1) # initial level

frame.set_draw_handler(_puzzle_game.main)
frame.set_keydown_handler(_puzzle_game.keydown_handler)
frame.set_keyup_handler(_puzzle_game.keyup_handler)
frame.set_mouseclick_handler(_puzzle_game.click)

frame.set_canvas_background("Green")
frame.start()
