# Bunny's Big Adventure!
# Created by: Jenna Netland
# Copyright (c) 2012 All Rights Reserved, Jenna Netland
# All images and music are also Copyright (c) 2012 All Rights Reserved, Jenna Netland

# Good luck, and hope you enjoy :)


# Copyright (c) 2012 All Rights Reserved, Jenna Netland

import math
import random
import simplegui

class Object:
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, scale = 1, sound = None):
        self.pos = pos
        self.vel = vel
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.image_radius = image_radius
        self.scale = scale
        self.size = (image_size[0] * scale, image_size[1] * scale)
        self.radius = image_radius * scale
        self.sound = sound
    
    def __str__(self):
        a = "OBJECT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Velocity: " + str(self.vel) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Scale: " + str(self.scale) + "\n"
        a += "Radius: " + str(self.radius) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    # Key Methods
    def update(self):
        pass
    
    def move(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
    def collide(self, obj):
        p1 = self.get_pos()
        p2 = obj.get_pos()
        distance = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
        if distance < self.radius + obj.get_radius():
            return True
        return False
    
    def draw(self, canvas, offset):
        canvas.draw_image(self.image, self.image_center, self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_vel(self):
        return self.vel
    
    def set_vel(self, v):
        self.vel = v
    
    def get_image(self):
        return [self.image, self.image_center, self.image_size, self.image_radius]
    
    def set_image(self, i, c, s, r):
        self.image = i
        self.image_center = c
        self.image_size = s
        self.image_radius = r
        self.size = (s[0] * self.scale, s[1] * self.scale)
        self.radius = r * self.scale
        
    def get_scale(self):
        return self.scale
    
    def set_scale(self, s):
        self.scale = s
        self.size = (self.image_size[0] * s, self.image_size[1] * s)
        self.radius = self.image_radius * s
        
    def get_size(self):
        return self.size
    
    def get_radius(self):
        return self.radius
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s
    
class StableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, interval, color, scale = 1, sound = None):
        self.interval = interval
        self.color = color
        self.time = 0
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
       
    def __str__(self):
        a = "STABLE OBJECT: " + "\n"
        a += "Interval: " + str(self.interval) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Time: " + str(self.time) + "\n"
        a += "\n"
        return Object.__str__(self) + a
        
    # Key Methods
    def update(self):
        self.time += 1
        if self.time >= self.interval:
            self.vel[0] *= -1
            self.vel[1] *= -1
            self.time = 0
        self.move()
            
    def next_pos(self):
        if self.time + 1 == self.interval:
            return [self.pos[0] - self.vel[0], self.pos[1] - self.vel[1]]
        return [self.pos[0] + self.vel[0], self.pos[1] + self.vel[1]]
    
    # Accessor Methods
    def get_interval(self):
        return self.interval
    
    def set_interval(self, i):
        self.interval = i
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
        
    def get_time(self):
        return self.time
    
    def set_time(self, t):
        self.time = t
        
class Treat(StableObject):
    def __init__(self, pos, image, image_center, image_size, image_radius, color, platforms, collected = False, scale = 1, sound = None):
        # Platforms can be a list or None
        self.platforms = platforms
        self.collected = collected
        StableObject.__init__(self, pos, [0, .5], image, image_center, image_size, image_radius, 15, color, scale, sound)
        
    def __str__(self):
        a = "TREAT:" + "\n"
        a += "Platforms: " + str(self.platforms) + "\n"
        a += "Collected: " + str(self.collected) + "\n"
        return StableObject.__str__(self) + a + "\n"
        
    # Key Methods
    def collect(self):
        self.collected = True
        if self.platforms != None:
            for p in self.platforms:
                p.activate()
                
    def drop(self):
        self.collected = False
        if self.platforms != None:
            for p in self.platforms:
                p.deactivate()
                
    def draw(self, canvas, offset, visible = False):
        if not self.collected or visible:
            if self.vel[1] < 0:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1] + self.image_size[1] + 1], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            else:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            
    def collide(self, obj):
        if not self.collected:
            if Object.collide(self, obj):
                if type(obj) == Animal:
                    obj.collect(self)
                return True
        return False
        
    # Accessor Methods
    def get_platforms(self):
        return self.platforms
    
    def set_platforms(self, p):
        self.platforms = p
        
    def get_collected(self):
        return self.collected
    
    def set_collected(self, c):
        self.collected = c
        
    def switch_collected(self):
        self.collected = not self.collected
        return self.collected
        
class Platform(StableObject):
    def __init__(self, points, vel, image, image_center, image_size, interval, color, active = False, on = True, sound = None):
        self.active = active
        self.on = on
        self.orig_state = [active, on]
        self.orig_vel = [vel[0], vel[1]]
        self.points = points
        self.orig_points = [[points[0][0], points[0][1]], [points[1][0], points[1][1]]]
        self.dimensions = [points[1][0] - points[0][0], image_size[1]]
        pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        self.orig_pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        StableObject.__init__(self, pos, vel, image, image_center, image_size, points[1][0] - points[0][0], interval, color, 1, sound)
        
    def __str__(self):
        a = "PLATFORM:" + "\n"
        a += "Active: " + str(self.active) + "\n"
        a += "On: " + str(self.on) + "\n"
        a += "Original State: " + str(self.orig_state) + "\n"
        a += "Original Velocity: " + str(self.orig_vel) + "\n"
        a += "Points: " + str(self.points) + "\n"
        a += "Original Points: " + str(self.orig_points) + "\n"
        a += "Dimensions: " + str(self.dimensions) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
        
    # Key Methods
    def update(self):
        if self.active:
            StableObject.update(self)
            
    def move(self):
        if self.active:
            self.points[0][0] += self.vel[0]
            self.points[0][1] += self.vel[1]
            self.points[1][0] += self.vel[0]
            self.points[1][1] += self.vel[1]
            StableObject.move(self)
            
    def next_points(self):
        if self.time + 1 == self.interval and self.active:
            return [[self.points[0][0] - self.vel[0], self.points[0][1] - self.vel[1]], [self.points[1][0] - self.vel[0], self.points[1][1] - self.vel[1]]]
        elif self.active:
            return [[self.points[0][0] + self.vel[0], self.points[0][1] + self.vel[1]], [self.points[1][0] + self.vel[0], self.points[1][1] + self.vel[1]]]
        return self.points
            
    def collide(self, unstable_obj):
        """Determines if an object will fall through the platform the next time it moves"""
        if unstable_obj.get_vel()[1] > 0 and self.on:
            p = [unstable_obj.get_pos()[0], unstable_obj.get_pos()[1] + unstable_obj.get_radius()]
            p2 = [unstable_obj.next_pos()[0], unstable_obj.next_pos()[1] + unstable_obj.get_radius()]
            if p[1] <= self.points[0][1]:
                if self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() or self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() - self.vel[1]:
                    if p[0] >= self.points[0][0] and p[0] <= self.points[1][0] or p2[0] >= self.points[0][0] and p2[0] <= self.points[1][0]:
                        unstable_obj.set_vel([unstable_obj.get_vel()[0], 0])
                        unstable_obj.set_pos([unstable_obj.get_pos()[0], self.next_points()[0][1] - unstable_obj.get_radius() - 1])
                        if self.active:
                            unstable_obj.set_bonus_vel(self.vel[0])      
                        unstable_obj.set_num_jumps(0)
                        return True
        return False
    
    def draw(self, canvas, offset):
        if self.on:
            c = self.image_center[1]
        else:
            c = self.image_center[1] + self.image_size[1]
        # Center
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]), c], [self.image_size[0] - 12, self.image_size[1]], [self.pos[0] + offset[0], self.pos[1] + offset[1] + self.image_size[1] / 2.0], self.dimensions)
        # Left
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) - self.image_size[0] / 2.0 + 3, c], [6, self.image_size[1]], [self.points[0][0] + offset[0], self.points[0][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        # Right
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) + self.image_size[0] / 2.0 - 3, c], [6, self.image_size[1]], [self.points[1][0] + offset[0], self.points[1][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        
    def activate(self):
        self.active = True
        self.on = True
        
    def deactivate(self):
        self.active = self.orig_state[0]
        self.on = self.orig_state[1]
        
    def reset_points(self):
        self.points = [[self.orig_points[0][0], self.orig_points[0][1]], [self.orig_points[1][0], self.orig_points[1][1]]]
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [self.orig_vel[0], self.orig_vel[1]]
        self.time = 0
        
    # Accessor Methods
    def get_active(self):
        return self.active
    
    def set_active(self, a):
        self.active = a
        
    def switch_active(self):
        self.active = not self.active
        return self.active
    
    def get_on(self):
        return self.on
    
    def set_on(self, o):
        self.on = o
        
    def switch_on(self):
        self.on = not self.on
        return self.on
    
    def get_points(self):
        return self.points
    
    def set_points(self, p):
        self.points = p
        self.pos = [(p[0][0] + p[1][0]) / 2.0, (p[0][1] + p[1][1]) / 2.0]
        self.dimensions = [p[1][0] - p[0][0], self.image_size[1]]
        
    def set_pos(self, p):
        n = p[0] - self.pos[0]
        self.set_points([[self.points[0][0] + n, p[1]], [self.points[1][0] + n, p[1]]])
        
    def get_orig_state(self):
        return self.orig_state
    
    def set_orig_state(self, o):
        self.orig_state = o
        
    def get_dimensions(self):
        return self.dimensions
    
    def set_dimensions(self, d):
        self.dimensions = d
        
    def get_orig_points(self):
        return self.orig_points
    
    def set_orig_points(self, o):
        self.orig_points = o
        
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, o):
        self.orig_pos = o
        
    def get_orig_vel(self):
        return self.orig_vel
    
    def set_orig_vel(self, v):
        self.orig_vel = v
    
class PeriodicImage(StableObject):
    def __init__(self, pos, vel, image, image_center, image_size, interval, wait, tiles, rotation = 0, rotation_speed = 0, bonus = False, scale = 1, sound = None):
        self.wait = wait
        self.tiles = tiles
        self.rotation = rotation
        self.rotation_speed = rotation_speed
        self.bonus = bonus
        self.r = rotation
        self.t = 0
        self.tile = 0
        StableObject.__init__(self, pos, vel, image, image_center, image_size, image_size[1], interval, "White", scale, sound)
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        
    def __str__(self):
        a = "PERIODIC IMAGE: " + "\n"
        a += "Wait: " + str(self.wait) + "\n"
        a += "Tiles: " + str(self.tiles) + "\n"
        a += "Rotation: " + str(self.rotation) + "\n"
        a += "Rotation Speed: " + str(self.rotation_speed) + "\n"
        a += "Bonus: " + str(self.bonus) + "\n"
        a += "r: " + str(self.r) + "\n"
        a += "t: " + str(self.t) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
    
    def draw(self, canvas):
        self.update()
        canvas.draw_image(self.image, [self.image_center[0] + self.tile * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r)
        if self.bonus:
            canvas.draw_image(self.image, [self.image_center[0] + (self.tile + 3) * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r + .9)
        self.t += 1
        if self.t == self.wait:
            self.tile = (self.tile + 1) % self.tiles
            self.t = 0
            self.r += self.rotation_speed
    
class UnstableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction = 0, scale = 1, sound = None):
        self.gravity = gravity
        self.speed = speed
        self.jump_height = jump_height
        self.direction = direction
        self.bonus_vel = 0
        self.num_jumps = 0
        self.max_jumps = 2
        self.tile = [0, 0]
        self.count = 0
        self.moving = False
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
    
    def __str__(self):
        a = "UNSTABLE OBJECT: " + "\n"
        a += "Gravity: " + str(self.gravity) + "\n"
        a += "Speed: " + str(self.speed) + "\n"
        a += "Jump Height: " + str(self.jump_height) + "\n"
        a += "Direction: " + str(self.direction) + "\n"
        a += "Bonus Velocity: " + str(self.bonus_vel) + "\n"
        a += "Num Jumps: " + str(self.num_jumps) + "\n"
        a += "Max Jumps: " + str(self.max_jumps) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "Count: " + str(self.count) + "\n"
        a += "Moving: " + str(self.moving) + "\n"
        a += "\n"
        return Object.__str__(self) + a
    
    # Key Methods
    def update(self):
        self.move()
    
    def move(self):
        self.vel[1] += self.gravity
        self.vel[0] = self.direction * self.speed + self.bonus_vel
        self.bonus_vel = 0
        Object.move(self)
        
    def next_pos(self):
        ans = [0, 0]
        ans[1] = self.pos[1] + self.vel[1] + self.gravity
        ans[0] = self.pos[0] + self.vel[0]
        return ans
    
    def jump(self):
        if self.num_jumps < self.max_jumps:
            self.vel[1] = -math.sqrt(math.fabs(2 * self.gravity * self.jump_height))
            self.is_falling = True
            self.num_jumps += 1
            if self.sound != None:
                self.sound.rewind()
                self.sound.play()
    
    def draw(self, canvas, offset):
        if self.direction == -1:
            self.tile[1] = 1
        elif self.direction == 1:
            self.tile[1] = 0
        if self.num_jumps > 0:
            if self.vel[1] > 0:
                self.tile[0] = 2
            elif self.vel[1] < 0:
                self.tile[0] = 1
            else:
                self.tile[0] = 0
        elif self.direction != 0:
            if not self.moving:
                self.count = 8
                self.moving = True
            else:
                self.count += 1
            if self.count > 8:
                self.tile[0] = (self.tile[0] + 1) % 3
                self.count = 0
        else:
            self.tile[0] = 0
            self.count = 0
            self.moving = False
        
        canvas.draw_image(self.image, [self.image_center[0] + self.tile[0] * self.image_size[0], self.image_center[1] + self.tile[1] * self.image_size[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_gravity(self):
        return self.gravity
    
    def set_gravity(self, g):
        self.gravity = g
        
    def get_speed(self):
        return self.get_speed
    
    def set_speed(self, s):
        self.speed = s
        
    def get_jump_height(self):
        return self.jump_height
    
    def set_jump_height(self, j):
        self.jump_height = j
    
    def get_direction(self):
        return self.direction
    
    def set_direction(self, d):
        self.direction = d
        
    def get_bonus_vel(self):
        return self.bonus_vel
    
    def set_bonus_vel(self, v):
        self.bonus_vel = v
        
    def get_num_jumps(self):
        return self.num_jumps
    
    def set_num_jumps(self, n):
        self.num_jumps = n
        
    def get_max_jumps(self):
        return self.max_jumps
    
    def set_max_jumps(self, m):
        self.max_jumps = m
        
    def get_tile(self):
        return self.tile
    
    def set_tile(self, t):
        self.tile = t
        
    def get_count(self):
        return self.count
    
    def set_count(self, c):
        self.count = c
        
    def get_moving(self):
        return self.moving
        
    def set_moving(self, m):
        self.moving = m
        
class Animal(UnstableObject):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, controls, direction = 0, scale = 1, num_treats = 2, sound = None):
        self.treats = [None, None]
        self.num_treats = num_treats
        self.treats = []
        for i in range(self.num_treats):
            self.treats.append(None)
        # 0 = left, 1 = right, 2 = jump, 3 = throw
        self.controls = controls
        self.control_state = [False, False, False, False]
        self.orig_pos = [pos[0], pos[1]]
        UnstableObject.__init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction, scale, sound)
        
    def __str__(self):
        a = "ANIMAL:" + "\n"
        a += "Num Treats: " + str(self.num_treats) + "\n"
        a += "Treats: " + str(self.treats) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        a += "Control State: " + str(self.control_state) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return UnstableObject.__str__(self) + a
        
    # Key Methods        
    def reset(self):
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [0, 0]
        self.direction = 0
        self.clear_treats()
        self.control_state = [False, False, False, False]
        self.num_jumps = 0
    
    def collect(self, treat):
        t = self.treats[0]
        if t != None:
            t.drop()
        self.treats.pop(0)
        self.treats.append(treat)
        treat.collect()
        return t
     
    def drop_treat(self):
        popped = False
        for i in range(self.num_treats):
            if self.treats[i] != None and not popped:
                self.treats[i].drop()
                self.treats.pop(i)
                self.treats.insert(i, None)
                popped = True
    
    def key_handler(self, key, sign):
        print(sign, "****")
        for i in range(0, 4):
            if key == simplegui.KEY_MAP[self.controls[i]]:
                print(sign)
                if sign == 'down':
                    self.control_state[i] = True
                    self.update_direction()
                elif sign == 'up':
                    self.control_state[i] = False
                    self.update_direction()
                else:
                    print("Error: Animal.key_handler(): incorrect sign")
                    
    def update_direction(self):
        if self.control_state[0] and not self.control_state[1]:
            self.direction = -1
        elif not self.control_state[0] and self.control_state[1]:
            self.direction = 1
        else:
            self.direction = 0
        if self.control_state[2]:
            self.jump()
            self.control_state[2] = False
        if self.control_state[3]:
            self.drop_treat()
            self.control_state[3] = False
            
    # Accessor Methods
    def get_treats(self):
        return self.treats
    
    def clear_treats(self):
        for i in range(0, len(self.treats)):
            self.drop_treat() 
            
    def get_num_treats(self):
        return self.num_treats
    
    def set_num_treats(self, n):
        self.num_treats = n
        self.clear_treats()
    
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, p):
        self.orig_pos = p
  



import codeskulptor


# -----------------------
# Images and Sound
# -----------------------

# Sound
menu_music = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Menu.m4a"))
arcade_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Arcade.m4a"))
arcade_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_ArcadeMid.m4a"))
puzzle_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 
puzzle_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 

bounce_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Bounce.m4a"))
brring_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Brring.m4a"))
button_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Button.m4a"))

bounce_sound = None
button_sound = None

# Images
fixed_text_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Font.png"))
button_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Buttons.png"))
minibutton_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Minibuttons.png"))
platform_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")),simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_BasicPlatforms.png"))]
animal_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Bunnies.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Squirrel.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_PlainBall.png"))]
treat_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Carrots.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Acorns.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_TreatBalls.png"))]
sparkle_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Sparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_RedSparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_BlueSparkles.png"))]
star_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Star.png"))

title_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Title.png"))
instructions_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Instructions.png"))
arcade_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Arcade.png"))
level_select_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelSelect.png"))
high_scores_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_HighScores.png"))
options_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Options.png"))
credits_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Credits.png"))
new_high_score_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_NewHighScore.png"))

easy_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Easy.png"))
medium_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Medium.png"))
hard_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Hard.png"))
paused_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Pause.png"))

game_over_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_GameOver.png"))
win_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_ArcadeWin.png"))
level_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelWin.png"))
final_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_AllWin.png"))

# -----------------------
# Class Definitions
# -----------------------
       
class Menu:
    def __init__(self, screen, buttons = []):
        self.buttons = buttons
        self.screen = screen
        self.index = [0, 0]
        if self.buttons != None:
            self.buttons[0][0].set_selected(True)
     
    def __str__(self):
        a = "MENU:" + "\n"
        a += "Index: " + str(self.index) + "\n"
        a += "    Buttons: " + "\n"
        for c in self.buttons:
            for b in c:
                a += str(b)
        a += "    Screen: " + "\n" + str(self.screen)
        a += "\n"
        return a
            
    def draw(self, canvas):
        self.screen.draw(canvas)
        for l in self.buttons:
            for b in l:
                b.draw(canvas)
                   
    def keyhandler(self, key):
        if key == simplegui.KEY_MAP['down']:
            if self.index[0] < len(self.buttons) - 1:
                self.set_cur_button(False)
                self.index[0] += 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['up']:
            if self.index[0] > 0:
                self.set_cur_button(False)
                self.index[0] -= 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['right']:
            if self.index[1] < len(self.buttons[self.index[0]]) - 1:
                self.set_cur_button(False)
                self.index[1] += 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['left']:
            if self.index[1] > 0:
                self.set_cur_button(False)
                self.index[1] -= 1
                self.set_cur_button(True)
        elif key == 13:
            self.activate_cur_button()
               
    def click(self, pos):
        for a in self.buttons:
            for b in a:
                b.set_selected(False)
                if b.in_button(pos):
                    b.activate()
                    b.set_selected(True)
                
    def get_screen(self):
        return self.screen
    
    def set_screen(self, s):
        self.screen = s
        
    def get_buttons(self):
        return self.buttons
        
    def set_buttons(self, b):
        self.buttons = b
        self.index = [0, 0]
        self.set_cur_button(True)
        
    def get_index(self):
        return self.index
    
    def set_index(self, i):
        self.index = i
        
    def set_cur_button(self, b):
        self.buttons[self.index[0]][self.index[1]].set_selected(b)
        
    def activate_cur_button(self):
        self.buttons[self.index[0]][self.index[1]].activate()
        
class Screen:
    def __init__(self, images, stable_objects, text):
        #[image, center_source, width_height_source, center_dest, width_height_dest, rotation]
        self.images = images
        self.stable_objects = stable_objects
        self.text = text
    
    def __str__(self):
        a = "SCREEN:" + "\n"
        a += "Images: " + str(self.images) + "\n"
        if self.stable_objects != None:
            a += "    Stable Objects: " + "\n"
            for s in self.stable_objects:
                a += str(s)
        else:
            a += "Stable Objects: None" + "\n"
        if self.text != None:
            a += "    Text: " + "\n"
            for t in self.text:
                a += str(t)
        else:
            a += "Text: None" + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if self.images != None:
            for i in self.images:
                canvas.draw_image(i[0], i[1], i[2], i[3], i[4], i[5])
        if self.stable_objects != None:
            for s in self.stable_objects:
                s.update()
                if type(s) == PeriodicImage:
                    s.draw(canvas)
                else:
                    s.draw(canvas, [0, 0])
        if self.text != None:
            for t in self.text:
                t.draw(canvas)
 
    def get_images(self):
        return self.images
    
    def set_images(self, i):
        self.images = i
        
    def get_stable_objects(self):
        return self.stable_objects
    
    def set_stable_objects(self, s):
        self.stable_objects = s
        
    def get_text(self):
        return self.text
    
    def set_text(self, t):
        self.text = t
                
class Text:
    def __init__(self, text_list, pos, size, color, grid = False):
        self.text_list = text_list
        self.pos = pos
        self.size = size
        self.color = color
        self.grid = grid
        self.fixed_text = fixed_text_image
        self.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .:0123456789_"
     
    def __str__(self):
        a = "TEXT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Text List: " + str(self.text_list) + "\n"
        a += "Size: " + str(self.size) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Grid: " + str(self.grid) + "\n"
        a += "\n"
        return a
        
    def draw(self, canvas):
        i = 1
        for t in self.text_list:
            y_offset = i * (self.size)
            if not self.grid:
                canvas.draw_text(t, [self.pos[0], self.pos[1] + y_offset], self.size, self.color)
            else:
                width = 20
                height = 40
                center = [12, 23]
                offset = 10
                n = 0
                while n < len(t):
                    canvas.draw_image(self.fixed_text, [center[0] + ((width + 4) * self.chars.index(t[n])), center[1]], [width, height], [self.pos[0] + offset, self.pos[1] + y_offset], [width, height])
                    offset += 25
                    n += 1
            i += 1
    
    def get_text_list(self):
        return self.text_list
    
    def set_text_list(self, t):
        self.text_list = t
        
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_size(self):
        return self.size
    
    def set_size(self, s):
        self.size = s
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
      
class Button:
    def __init__(self, pos, image, image_center, image_size, action):
        self.pos = pos
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.action = action
        self.selected = False
        self.sound = button_sound
    
    def __str__(self):
        a = "BUTTON:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Action: " + str(self.action) + "\n"
        a += "Selected: " + str(self.selected) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if not self.selected:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size)
        else:
            canvas.draw_image(self.image, [self.image_center[0], self.image_center[1] + self.image_size[1]], self.image_size, self.pos, self.image_size)
        
    def activate(self):
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        self.action()
    
    def in_button(self, pos):
        if pos[0] < self.pos[0] + self.image_size[0] / 2 and pos[0] > self.pos[0] - self.image_size[0] / 2:
            if pos[1] < self.pos[1] + self.image_size[1] / 2 and pos[1] > self.pos[1] - self.image_size[1] / 2:
                return True
        return False
    
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_image(self):
        return self.image
    
    def get_image_center(self):
        return self.image_center
    
    def get_image_size(self):
        return self.image_size
    
    def set_image(self, i, c, s):
        self.image = i
        self.image_center = c
        self.image_size = s
        
    def get_action(self):
        return self.action
    
    def set_action(self, a):
        self.action = a
       
    def get_selected(self):
        return self.selected
    
    def set_selected(self, s):
        self.selected = s
        
    def switch_selected(self):
        self.selected = not self.selected
        return self.selected
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s

class Game:
    def __init__(self, level, controls, theme):
        
        self.easy_screen = Screen([[easy_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.medium_screen = Screen([[medium_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.hard_screen = Screen([[hard_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        paused_screen = Screen([[paused_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.platform_images = platform_images
        self.animal_images = animal_images
        self.treat_images = treat_images
        resume_button = Button([300, 350], button_image, [3875, 50], [251, 100], lambda : self.unpause())
        return_button = Button([600, 350], button_image, [125, 50], [251, 100], lambda : self.return_to_title())
        self.pause_menu = Menu(paused_screen, [[resume_button, return_button]])
            
        self.animal = None
        self.theme_index = theme
        self.controls = controls
        self.yellow_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[0], [34, 35], [70, 70], 1, 3, 7, 0, .05, True, 1.5)
        self.pink_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[1], [34, 35], [70, 70], 1, 3, 7, math.pi / 3, .05, True, 1.5)
        self.blue_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[2], [34, 35], [70, 70], 1, 3, 7, 2 * math.pi / 3, .05, True, 1.5)
        self.sparkles = [self.yellow_sparkle, self.pink_sparkle, self.blue_sparkle]
        
        self.goal_sound = brring_sound
        
        self.camera_offset = [0, 0]
        self.levels = []
        self.next_level_timer = simplegui.create_timer(1000, self.level_end)
        
        self.level = level
        self.level_max = 900
        self.treats = []
        self.platforms = []
        self.text = None
        self.screen = None
        
        self.in_level = False
        self.is_ending = False
        self.paused = False
        self.start_game()
    
    def __str__(self):
        a = "GAME:" + "\n"
        a += "Level: " + str(self.level) + "\n"
        a += "In Level: " + str(self.in_level) + "\n"
        a += "Is Ending: " + str(self.is_ending) + "\n"
        a += "Paused: " + str(self.paused) + "\n"
        a += "Theme Index: " + str(self.theme_index) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        return a
    
    def create_levels(self):
        self.levels = []
        for i in range(31):
            self.levels.append([["Platforms"], ["Treats"], "Text"])
            
        treat_scale = 1.2
        text_color = "Black"

        self.levels[0][0] = [14, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[190, 218], [294, 218]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[566, 220], [668, 220]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[577, -94], [682, -94]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[582, -413], [689, -413]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[597, -730], [690, -730]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[182, -86], [299, -86]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[184, -402], [305, -402]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[186, -724], [310, -724]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[405, 130], [483, 130]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[411, -165], [477, -165]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[438, -488], [496, -488]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[444, -854], [500, -854]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[375, -1099], [561, -1099]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[0][1] = [1, [467, -1302], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[0][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        
        self.levels[1][0] = [1, [[350, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[1][1] = [1, [600, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[1][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        self.levels[2][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 350], [800, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[2][1] = [1, [700, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[2][2] = ["Jump using the '" + self.controls[2] + "' key!", [250, 400], 30, text_color]
        self.levels[3][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[700, 350], [900, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[3][1] = [1, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[3][2] = ["Tap '" + self.controls[2] + "' again while in the air to double-jump!", [200, 400], 30, text_color]
        self.levels[4][0] = [2, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[408.5, 178], [493.5, 178]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[4][1] = [1, [455, -29.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1], False, treat_scale]
        self.levels[4][2] = ["Wait for the second jump until you start to fall!", [100, 450], 30, text_color]
        self.levels[5][0] = [4, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[524, 242], [633, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[670, 84], [756, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[970, 90], [1050, 90]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[5][1] = [1, [1049, -109], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3], False, treat_scale]
        self.levels[5][2] = ["You can go further than you think!", [300, 450], 30, text_color]
        self.levels[6][0] = [2, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False]
        self.levels[6][1] = [2, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale]
        self.levels[6][2] = ["Obtain the treats to affect similarly colored platforms!", [10, 400], 30, text_color]
        self.levels[7][0] = [3, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[650, 350], [800, 350]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[1100, 350], [1300, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[7][1] = [2, [1200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale]
        self.levels[7][2] = ["Some platforms move when activated!", [200, 400], 30, text_color]
        self.levels[8][0] = [4, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[650, 350], [800, 350]], [.5, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, False, [[1100, 650], [1300, 650]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[8][1] = [3, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [350, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [1200, 600], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[8][2] = ["There can be more than one treat and platform!", [50, 400], 30, text_color]
        self.levels[9][0] = [7, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 300], [700, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[750, 300], [850, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[900, 300], [1000, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[1050, 300], [1150, 300]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[1300, 0], [1400, 0]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1200, 300], [1300, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[9][1] = [3, [350, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 2, 3], False, treat_scale, [1250, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [1350, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[9][2] = ["You can pause at any time by pressing the 'p' key!", [400, 400], 30, text_color]
        self.levels[10][0] = [6, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 200], [700, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[700, 50], [800, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[800, -100], [900, -100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[900, -250], [1000, -250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, False, [[1000, -400], [1100, -400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[10][1] = [5, [550, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale, [650, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [1050, -450], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [750, 0], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [850, -150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale]
        self.levels[10][2] = ["You can only hold 2 treats at a time!", [200, 400], 30, text_color]
        self.levels[11][0] = [5, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[399, 217], [508, 217]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[301, 64], [383, 64]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[164, -69], [258, -69]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[163, -240], [258, -240]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[11][1] = [5, [210, -429.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [328, 364], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [577, 361], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [450, 87.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [343, -26.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale]
        self.levels[11][2] = ["Sometimes the treats form a puzzle!", [200, 450], 30, text_color]
        self.levels[12][0] = [8, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[210, 275], [340, 275]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[551, 278], [668, 278]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[348, 135], [550, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[217, -1], [338, -1]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[555, -5], [666, -5]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[346, -149], [552, -149]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[397.5, -307], [494.5, -307]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[12][1] = [5, [443, -437.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 3, 6], False, treat_scale, [529, 106.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [362, 108], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4], False, treat_scale, [364, 376.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 7], False, treat_scale, [530, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[12][2] = ["The solution might not be obvious right away!", [150, 450], 30, text_color]
        self.levels[13][0] = [2, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1056, 222], [1165, 222]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[13][1] = [5, [541, 340], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [699, 372], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [999, 368], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [857, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [1117, 99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[13][2] = ["You may not want to get every treat!", [300, 450], 30, text_color]
        self.levels[14][0] = [7, [[249, 410], [649, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[259, 224], [352, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[552, 224], [640, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[573, 55], [657, 55]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[254, 52], [350, 52]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[388, -66], [501, -66]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[392, -253], [497, -253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False]
        self.levels[14][1] = [5, [558, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [617, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale, [353, 383], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [279, 382], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3, 6], False, treat_scale, [442, -431.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 5], False, treat_scale]
        self.levels[14][2] = ["You can use the '" + self.controls[3] + "' key to drop unwanted treats!", [50, 450], 30, text_color]
        self.levels[15][0] = [5, [[200, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[400, 50], [500, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[50, 350], [150, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[750, 350], [850, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[15][1] = [5, [450, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [650, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [100, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [250, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [3], False, treat_scale, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale]
        self.levels[15][2] = ["Good luck!", [370, 400], 30, text_color]
        self.levels[16][0] = [6, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[437, 257], [557, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[437, 99], [549, 99]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[88, 283], [214, 283]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-133, 166], [-7, 166]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-359, 48], [-218, 48]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[16][1] = [4, [625, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [551, 366.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 4], False, treat_scale, [487, -99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [-288, -127], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[16][2] = ["", [300, 600], 30, "Silver"]
        self.levels[17][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[560, 86], [648, 86]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[676, 399], [822, 399]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 2, False, True, [[678, 88], [859, 88]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 3, False, True, [[350, 87], [505, 87]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 4, False, True]
        self.levels[17][1] = [4, [282, 350], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [598, -56], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [1052, -127.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [41, -67.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[17][2] = ["", [300, 600], 30, "Silver"]
        self.levels[18][0] = [11, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-181, 399], [-92, 399]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1003, 410], [1078, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[371, 135], [525, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[247, 670], [669, 670]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-45, 408], [183, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[687, 421], [981, 421]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[368, 545], [528, 545]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[381, 267], [518, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[77, 728], [260, 728]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-195, 731], [-128, 731]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 6, False, False]
        self.levels[18][1] = [7, [447, 636.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-141, 349.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [7], False, treat_scale, [611, 369], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [6], False, treat_scale, [275, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [5], False, treat_scale, [453, 34.41408904452442], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [261, 646.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9], False, treat_scale, [-48, 672], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [10], False, treat_scale]
        self.levels[18][2] = ["", [300, 600], 30, "Silver"]
        self.levels[19][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[114, 668], [243, 668]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[120, 492], [234, 492]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[972, 91], [1052, 91]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[681, 109], [832, 109]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True]
        self.levels[19][1] = [4, [1010, 63.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [117, 631], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [237, 632.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [272, 359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale]
        self.levels[19][2] = ["", [300, 600], 30, "Silver"]
        self.levels[20][0] = [9, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[404, 676], [465, 676]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[759, 685], [887, 685]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-8, 682], [110, 682]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[154, 535], [312, 535]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[584, 546], [766, 546]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[369, 212], [548, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[203, 869], [264, 869]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[578, 873], [633, 873]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[20][1] = [6, [825, 633.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [5], False, treat_scale, [38, 636], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 641.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [6, 7, 8], False, treat_scale, [465, 91.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [232, 840], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [606, 844], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale]
        self.levels[20][2] = ["", [300, 600], 30, "Silver"]
        self.levels[21][0] = [7, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[416.5, 272], [499.5, 272]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[533, 182], [649, 182]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[682.5, 88], [789.5, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[262, 181], [372, 181]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[133, 89], [247, 89]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[429, 87], [487, 87]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 7, False, False]
        self.levels[21][1] = [7, [269, 107.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [629, 102.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [524, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [1], False, treat_scale, [764, 7], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [109, 17], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [6], False, treat_scale, [448, -171.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [504, 237.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[21][2] = ["", [300, 600], 30, "White"]
        self.levels[22][0] = [13, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[610, 501], [773, 501]], [1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 4, False, True, [[767, 400], [907, 400]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 5, False, True, [[619, 270], [771, 270]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, True, [[93, 271], [240, 271]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 7, False, True, [[-19, 397], [121, 397]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[77, 502], [279, 502]], [-1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, True, [[372, 222], [521, 222]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, True, [[377, -71], [516, -71]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-336, 727], [-257, 727]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-243, 654], [-150, 654]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 7, False, False, [[1109, 754], [1193, 754]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1062, 638], [1144, 638]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 2, False, False]
        self.levels[22][1] = [8, [322, 399], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [380, 405.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [539, 407.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [605, 394.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [1002, 697], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3, 12], False, treat_scale, [980, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [7], False, treat_scale, [441, -312.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-303, 661], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [4, 10], False, treat_scale]
        self.levels[22][2] = ["", [300, 600], 30, "Silver"]
        self.levels[23][0] = [15, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[332, 286], [549, 286]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[137, 135], [290, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[554, 132], [706, 132]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-91, 123], [31, 123]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 160, 3, False, True, [[-308, 120], [-155, 120]], [0, 0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 480, 3, False, True, [[-476, 142], [-365, 142]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[-668, 427], [-537, 427]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[789, 132], [1053, 132]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 4, False, True, [[1120, 408], [1304, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1329, 224], [1403, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1512, 123], [1619, 123]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1705, -7], [1781, -7]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[-5, 460], [130, 460]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-319, 463], [-258, 463]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[23][1] = [8, [334, 251], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [530, 244], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3], False, treat_scale, [128, 55], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4, 5, 6], False, treat_scale, [689, 55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-607, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9, 10, 11, 12], False, treat_scale, [1739, -67], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-341, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [14], False, treat_scale, [-99, 314.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [13], False, treat_scale]
        self.levels[23][2] = ["", [300, 600], 30, "Silver"]
        self.levels[24][0] = [11, [[50, 400], [850, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[14, 88], [162, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[370, 94], [527, 94]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[752, 92], [876, 92]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[532, 253], [732, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[147, 244], [369, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[890, 242], [1031, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-199, 244], [-17, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[541, -84], [747, -84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[134, -105], [355, -105]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[356, -226], [561, -226]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[24][1] = [8, [107, 352], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [259, 358.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [7, 9], False, treat_scale, [618, 362], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [5], False, treat_scale, [799, 354], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [8], False, treat_scale, [814, 39.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [10], False, treat_scale, [78, 30.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 52], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [464, -466], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[24][2] = ["", [300, 600], 30, "Silver"]
        self.levels[25][0] = [6, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[131.5, 257], [216.5, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[278, 257], [344, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[539, 255], [595, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[662.5, 253], [737.5, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[413, 200], [481, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False]
        self.levels[25][1] = [5, [436, -55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [319, 185.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4, 3], False, treat_scale, [724, 183], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [1], False, treat_scale, [570, 185], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [149, 190.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale]
        self.levels[25][2] = ["", [300, 450], 30, "White"] 
        self.levels[26][0] = [18, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[181, 519], [431, 519]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[487, 521], [701, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-73, 520], [115, 520]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[92, 621], [198, 621]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[411, 626], [510, 626]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[773, 522], [981, 522]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[693, 627], [795, 627]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[37, 396], [168, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-89, 221], [25, 221]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[138, 220], [281, 220]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[591, 212], [737, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[867, 208], [1003, 208]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[754, 396], [888, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[4, 80], [148, 80]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[270, 79], [630, 79]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[726, 84], [894, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[150, -78], [738, -78]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[26][1] = [7, [741, 598], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [16], False, treat_scale, [740, 559], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [10, 11], False, treat_scale, [460, 603], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [12, 14], False, treat_scale, [460, 561.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [13], False, treat_scale, [145, 602.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [15], False, treat_scale, [141, 566.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8, 9], False, treat_scale, [449, -297], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[26][2] = ["", [300, 600], 30, "Silver"]
        self.levels[27][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[376, 267], [513, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[391, 109], [506, 109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[-8, 398], [144, 398]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-501, 255], [-345, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[734, 404], [910, 404]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[1365, 400], [1497, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-501, 395], [-345, 395]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-31, 521], [62, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-209, 480], [-159, 480]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[27][1] = [8, [447, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale, [-426, 65.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [5], False, treat_scale, [1480, 229], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [289, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [6], False, treat_scale, [520, 369.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1, 4], False, treat_scale, [576, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [-190, 447.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [9], False, treat_scale, [-57, 516.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [8], False, treat_scale]
        self.levels[27][2] = ["", [300, 600], 30, "Silver"]
        self.levels[28][0] = [12, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[158, 233], [400, 233]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[489, 235], [709, 235]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[274, 158], [618, 158]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[493, 87], [709, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[170, 87], [404, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[689, 163], [917, 163]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[775, 241], [985, 241]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-30, 157], [205, 157]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-146, 239], [71, 239]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[384, -83], [510, -83]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[392, -225], [512, -225]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[28][1] = [13, [514, 206], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [11], False, treat_scale, [806, 209], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [10], False, treat_scale, [892, 214.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [336, 128], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [-57, 220.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [None], False, treat_scale, [36, 209.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [183, 133], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [362, 207], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [245, 211.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [551, 131.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [728, 132], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [645, 212.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [449, -444.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], False, treat_scale]
        self.levels[28][2] = ["", [300, 600], 30, "White"]
        self.levels[29][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[342, 204], [573, 204]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[141, 31], [315, 31]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-2, -119], [196, -119]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[352, -109], [582, -109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, True, False, [[602, 36], [760, 36]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[777, -120], [951, -120]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[584, -293], [768, -293]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[176, -300], [349, -300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[346, -469], [575, -469]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[29][1] = [9, [461, -629], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [258, -349], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [7], False, treat_scale, [678, -339], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], True, treat_scale, [867, -157.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8], False, treat_scale, [307, 371.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale, [225, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [607, 375], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [6], False, treat_scale, [674, 384.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale, [677, -359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale]
        self.levels[29][2] = ["", [300, 600], 30, "Silver"]
        self.levels[30][0] = [6, [[0, 300], [200, 300]], [.5, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 60, 2, False, False, [[200, 200], [400, 200]], [0, .3], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 3, False, False, [[400, 500], [600, 500]], [0, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 0, False, True, [[200, 500], [400, 500]], [-.5, -.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 1, False, False, [[-100, 100], [0, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False, [[100, 100], [200, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False]
        self.levels[30][1] = [5, [200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [0], False, treat_scale, [400, 200], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [600, 400], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [600, 100], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4, 5], False, treat_scale, [-150, -25], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[30][2] = ["", [300, 600], 30, "White"] 
        
    def start_game(self):
        self.create_levels()
        self.animal = Animal([450, 300], [0,0], self.animal_images[self.theme_index], [22, 26], [45, 52], 21, .5, 3, 120, self.controls, 0, 1, 2, bounce_sound)
        self.get_level()
        self.in_level = True
    
    def main(self, canvas):
        pass
    
    def update(self):
        
        self.animal.update()
        
        for p in self.platforms:
            p.collide(self.animal)
            p.update()
        for t in self.treats:
            t.update()
            t.collide(self.animal)
            
        p = self.animal.get_pos()
        self.camera_offset = [450 - p[0], 300 - p[1]]
        
        if p[1] > self.level_max:
            self.reset_level()
    
    def draw(self, canvas):
        
        # Scene
        self.screen.draw(canvas)
        canvas.draw_text(self.text[0], [self.text[1][0] + self.camera_offset[0], self.text[1][1] + self.camera_offset[1]], self.text[2], self.text[3])
        
        # Objects
        self.animal.draw(canvas, self.camera_offset)
        for p in self.platforms:
            p.draw(canvas, self.camera_offset)
        for t in self.treats:
            t.draw(canvas, self.camera_offset)

        # Current Treats Box
        canvas.draw_polygon([(25, 30), (100, 30), (100, 70), (25, 70)], 5, "White")
        t = self.animal.get_treats()
        for i in range(len(t)):
            if t[i] != None:
                if t[i].get_color() == 0 and self.in_level:
                    self.in_level = False
                    self.is_ending = True
                    self.next_level_timer.start()
                    self.goal_sound.rewind()
                    self.goal_sound.play()
                    for s in self.sparkles:
                        s.set_pos([t[i].get_pos()[0] + self.camera_offset[0], t[i].get_pos()[1] + self.camera_offset[1]])
                else:
                    t[i].draw(canvas, [44 + 35 * i - t[i].get_pos()[0], 50 - t[i].get_pos()[1]], True)
                    
        # Display
        canvas.draw_text("Level: " + str(self.level), [110, 70], 40, "White")
        
        # Sparkles
        if self.is_ending:
            for s in self.sparkles:
                s.draw(canvas)

    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['P']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
            
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
    
    def keyup_handler(self, key):
        if self.in_level and not self.paused:
            self.animal.key_handler(key, 'up')
        
    def unpause(self):
        self.paused = False
        
    def level_end(self):
        pass
    
    def next_level(self):
        if self.level < len(self.levels) - 1:
            self.level += 1
            self.in_level = True
            self.animal.reset()
            self.treats = []
            self.platforms = []
            self.get_level()
    
    def reset_level(self):
        self.animal.reset()
        for p in self.platforms:
            p.reset_points()
    
    def get_level(self):
        n = 9 # number of parameters for a platform
        for i in range(self.levels[self.level][0][0]):
            self.platforms.append(Platform(self.levels[self.level][0][n*i+1], self.levels[self.level][0][n*i+2], self.levels[self.level][0][n*i+3], self.levels[self.level][0][n*i+4], self.levels[self.level][0][n*i+5], self.levels[self.level][0][n*i+6], self.levels[self.level][0][n*i+7], self.levels[self.level][0][n*i+8], self.levels[self.level][0][n*i+9]))
        n = 9 # number of parameters for a treat
        for i in range(self.levels[self.level][1][0]):
            p = []
            for x in self.levels[self.level][1][n*i+7]:
                if x == None:
                    p = None
                else:
                    p.append(self.platforms[x])
            self.treats.append(Treat(self.levels[self.level][1][n*i+1], self.levels[self.level][1][n*i+2], self.levels[self.level][1][n*i+3], self.levels[self.level][1][n*i+4], self.levels[self.level][1][n*i+5], self.levels[self.level][1][n*i+6], p, self.levels[self.level][1][n*i+8], self.levels[self.level][1][n*i+9]))
        self.text = self.levels[self.level][2]
        if self.level <= 10:
            self.screen = self.easy_screen
        elif self.level <= 20:
            self.screen = self.medium_screen
        else:
            self.screen = self.hard_screen
        
    def return_to_title(self):
        self.stop_music()
             
    def play_music(self):
        self.music1_timer.stop()
        self.music1.rewind()
        self.music1.play()
        self.music1_timer.start()
        
    def replay_music(self):
        self.music1_timer.stop()
        self.music2_timer.stop()
        self.music2.rewind()
        self.music2.play()
        self.music2_timer.start()
        
    def stop_music(self):
        self.music1.pause()
        self.music2.pause()
        self.music1_timer.stop()
        self.music2_timer.stop()
        
     
class PuzzleGame(Game):
    def __init__(self, level, controls, theme, runner):
        Game.__init__(self, level, controls, theme)
        
        self.music1_timer = simplegui.create_timer(520000, self.replay_music)
        self.music1 = puzzle_music1
        self.music2_timer = simplegui.create_timer(520000, self.replay_music)
        self.music2 = puzzle_music2
        self.play_music()
        
        g = Treat([450, 230], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, None, False, 1.2)
        level_screen = Screen([[level_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], [g], None)
        final_screen = Screen([[final_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        
        next_button = Button([625, 350], button_image, [625, 50], [251, 100], self.next_level)
        replay_button = Button([275, 350], button_image, [375, 50], [251, 100], self.replay_level)
        self.level_menu = Menu(level_screen, [[replay_button, next_button]])
        self.final_menu = Menu(final_screen, [[replay_button]])
        
    def __str__(self):
        a = "PUZZLE GAME:" + "\n"
        a += "Num Levels: " + str(len(self.levels) - 1) + "\n"
        a += "\n"
        return Game.__str__(self) + a
        
    def main(self, canvas):
        if self.paused:
            self.pause_menu.draw(canvas)
        elif self.in_level:
            self.update()
            self.draw(canvas)
        elif self.is_ending:
            self.draw(canvas)
        elif self.level == len(self.levels) - 1:
            self.final_menu.draw(canvas)
        else:
            self.level_menu.draw(canvas)
        
    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['p']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
        elif self.level == len(self.levels) - 1:
            self.final_menu.keyhandler(key)
        else:
            self.level_menu.keyhandler(key)
        
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
        elif self.in_level:
            pass
        elif self.level == len(self.levels) - 1:
            self.final_menu.click(pos)
        else:
            self.level_menu.click(pos)
        
    def replay_level(self):
        self.reset_level()
        self.in_level = True
        
    def level_end(self):
        self.next_level_timer.stop()
        self.is_ending = False
        
         
# -----------------------
# Starting Game and Frame
# -----------------------
    
width = 900
height = 600

frame = simplegui.create_frame("Bunny's Big Adventure!", width, height, 100)

_controls = ['left', 'right', 'up', 'space']
_theme = 0
_puzzle_game = PuzzleGame(1, _controls, _theme, 0)

frame.set_draw_handler(_puzzle_game.main)
frame.set_keydown_handler(_puzzle_game.keydown_handler)
frame.set_keyup_handler(_puzzle_game.keyup_handler)
frame.set_mouseclick_handler(_puzzle_game.click)

frame.set_canvas_background("Green")
frame.start()
        
        
        
        
def deserialize(string, splitters=[' ', ';', ',']):
    lst = []
    for sub_str in string.split(splitters[0]):
        if sub_str[0] == 'T' or sub_str[0] == 'F':
            lst.append(bool(sub_str))
        elif sub_str[0] == '[' and sub_str[-1] == ']':
            lst.append(deserialize(sub_str[1:-1], splitters[1:]))
        else:
            lst.append(int(sub_str))
    return lst


print(deserialize("12 11 7 5 [[12,3];25] 49"))# Bunny's Big Adventure!
# Created by: Jenna Netland
# Copyright (c) 2012 All Rights Reserved, Jenna Netland
# All images and music are also Copyright (c) 2012 All Rights Reserved, Jenna Netland

# Good luck, and hope you enjoy :)


# Copyright (c) 2012 All Rights Reserved, Jenna Netland

import math
import random
import simplegui

class Object:
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, scale = 1, sound = None):
        self.pos = pos
        self.vel = vel
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.image_radius = image_radius
        self.scale = scale
        self.size = (image_size[0] * scale, image_size[1] * scale)
        self.radius = image_radius * scale
        self.sound = sound
    
    def __str__(self):
        a = "OBJECT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Velocity: " + str(self.vel) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Scale: " + str(self.scale) + "\n"
        a += "Radius: " + str(self.radius) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    # Key Methods
    def update(self):
        pass
    
    def move(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
    def collide(self, obj):
        p1 = self.get_pos()
        p2 = obj.get_pos()
        distance = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
        if distance < self.radius + obj.get_radius():
            return True
        return False
    
    def draw(self, canvas, offset):
        canvas.draw_image(self.image, self.image_center, self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_vel(self):
        return self.vel
    
    def set_vel(self, v):
        self.vel = v
    
    def get_image(self):
        return [self.image, self.image_center, self.image_size, self.image_radius]
    
    def set_image(self, i, c, s, r):
        self.image = i
        self.image_center = c
        self.image_size = s
        self.image_radius = r
        self.size = (s[0] * self.scale, s[1] * self.scale)
        self.radius = r * self.scale
        
    def get_scale(self):
        return self.scale
    
    def set_scale(self, s):
        self.scale = s
        self.size = (self.image_size[0] * s, self.image_size[1] * s)
        self.radius = self.image_radius * s
        
    def get_size(self):
        return self.size
    
    def get_radius(self):
        return self.radius
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s
    
class StableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, interval, color, scale = 1, sound = None):
        self.interval = interval
        self.color = color
        self.time = 0
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
       
    def __str__(self):
        a = "STABLE OBJECT: " + "\n"
        a += "Interval: " + str(self.interval) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Time: " + str(self.time) + "\n"
        a += "\n"
        return Object.__str__(self) + a
        
    # Key Methods
    def update(self):
        self.time += 1
        if self.time >= self.interval:
            self.vel[0] *= -1
            self.vel[1] *= -1
            self.time = 0
        self.move()
            
    def next_pos(self):
        if self.time + 1 == self.interval:
            return [self.pos[0] - self.vel[0], self.pos[1] - self.vel[1]]
        return [self.pos[0] + self.vel[0], self.pos[1] + self.vel[1]]
    
    # Accessor Methods
    def get_interval(self):
        return self.interval
    
    def set_interval(self, i):
        self.interval = i
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
        
    def get_time(self):
        return self.time
    
    def set_time(self, t):
        self.time = t
        
class Treat(StableObject):
    def __init__(self, pos, image, image_center, image_size, image_radius, color, platforms, collected = False, scale = 1, sound = None):
        # Platforms can be a list or None
        self.platforms = platforms
        self.collected = collected
        StableObject.__init__(self, pos, [0, .5], image, image_center, image_size, image_radius, 15, color, scale, sound)
        
    def __str__(self):
        a = "TREAT:" + "\n"
        a += "Platforms: " + str(self.platforms) + "\n"
        a += "Collected: " + str(self.collected) + "\n"
        return StableObject.__str__(self) + a + "\n"
        
    # Key Methods
    def collect(self):
        self.collected = True
        if self.platforms != None:
            for p in self.platforms:
                p.activate()
                
    def drop(self):
        self.collected = False
        if self.platforms != None:
            for p in self.platforms:
                p.deactivate()
                
    def draw(self, canvas, offset, visible = False):
        if not self.collected or visible:
            if self.vel[1] < 0:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1] + self.image_size[1] + 1], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            else:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            
    def collide(self, obj):
        if not self.collected:
            if Object.collide(self, obj):
                if type(obj) == Animal:
                    obj.collect(self)
                return True
        return False
        
    # Accessor Methods
    def get_platforms(self):
        return self.platforms
    
    def set_platforms(self, p):
        self.platforms = p
        
    def get_collected(self):
        return self.collected
    
    def set_collected(self, c):
        self.collected = c
        
    def switch_collected(self):
        self.collected = not self.collected
        return self.collected
        
class Platform(StableObject):
    def __init__(self, points, vel, image, image_center, image_size, interval, color, active = False, on = True, sound = None):
        self.active = active
        self.on = on
        self.orig_state = [active, on]
        self.orig_vel = [vel[0], vel[1]]
        self.points = points
        self.orig_points = [[points[0][0], points[0][1]], [points[1][0], points[1][1]]]
        self.dimensions = [points[1][0] - points[0][0], image_size[1]]
        pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        self.orig_pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        StableObject.__init__(self, pos, vel, image, image_center, image_size, points[1][0] - points[0][0], interval, color, 1, sound)
        
    def __str__(self):
        a = "PLATFORM:" + "\n"
        a += "Active: " + str(self.active) + "\n"
        a += "On: " + str(self.on) + "\n"
        a += "Original State: " + str(self.orig_state) + "\n"
        a += "Original Velocity: " + str(self.orig_vel) + "\n"
        a += "Points: " + str(self.points) + "\n"
        a += "Original Points: " + str(self.orig_points) + "\n"
        a += "Dimensions: " + str(self.dimensions) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
        
    # Key Methods
    def update(self):
        if self.active:
            StableObject.update(self)
            
    def move(self):
        if self.active:
            self.points[0][0] += self.vel[0]
            self.points[0][1] += self.vel[1]
            self.points[1][0] += self.vel[0]
            self.points[1][1] += self.vel[1]
            StableObject.move(self)
            
    def next_points(self):
        if self.time + 1 == self.interval and self.active:
            return [[self.points[0][0] - self.vel[0], self.points[0][1] - self.vel[1]], [self.points[1][0] - self.vel[0], self.points[1][1] - self.vel[1]]]
        elif self.active:
            return [[self.points[0][0] + self.vel[0], self.points[0][1] + self.vel[1]], [self.points[1][0] + self.vel[0], self.points[1][1] + self.vel[1]]]
        return self.points
            
    def collide(self, unstable_obj):
        """Determines if an object will fall through the platform the next time it moves"""
        if unstable_obj.get_vel()[1] > 0 and self.on:
            p = [unstable_obj.get_pos()[0], unstable_obj.get_pos()[1] + unstable_obj.get_radius()]
            p2 = [unstable_obj.next_pos()[0], unstable_obj.next_pos()[1] + unstable_obj.get_radius()]
            if p[1] <= self.points[0][1]:
                if self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() or self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() - self.vel[1]:
                    if p[0] >= self.points[0][0] and p[0] <= self.points[1][0] or p2[0] >= self.points[0][0] and p2[0] <= self.points[1][0]:
                        unstable_obj.set_vel([unstable_obj.get_vel()[0], 0])
                        unstable_obj.set_pos([unstable_obj.get_pos()[0], self.next_points()[0][1] - unstable_obj.get_radius() - 1])
                        if self.active:
                            unstable_obj.set_bonus_vel(self.vel[0])      
                        unstable_obj.set_num_jumps(0)
                        return True
        return False
    
    def draw(self, canvas, offset):
        if self.on:
            c = self.image_center[1]
        else:
            c = self.image_center[1] + self.image_size[1]
        # Center
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]), c], [self.image_size[0] - 12, self.image_size[1]], [self.pos[0] + offset[0], self.pos[1] + offset[1] + self.image_size[1] / 2.0], self.dimensions)
        # Left
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) - self.image_size[0] / 2.0 + 3, c], [6, self.image_size[1]], [self.points[0][0] + offset[0], self.points[0][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        # Right
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) + self.image_size[0] / 2.0 - 3, c], [6, self.image_size[1]], [self.points[1][0] + offset[0], self.points[1][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        
    def activate(self):
        self.active = True
        self.on = True
        
    def deactivate(self):
        self.active = self.orig_state[0]
        self.on = self.orig_state[1]
        
    def reset_points(self):
        self.points = [[self.orig_points[0][0], self.orig_points[0][1]], [self.orig_points[1][0], self.orig_points[1][1]]]
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [self.orig_vel[0], self.orig_vel[1]]
        self.time = 0
        
    # Accessor Methods
    def get_active(self):
        return self.active
    
    def set_active(self, a):
        self.active = a
        
    def switch_active(self):
        self.active = not self.active
        return self.active
    
    def get_on(self):
        return self.on
    
    def set_on(self, o):
        self.on = o
        
    def switch_on(self):
        self.on = not self.on
        return self.on
    
    def get_points(self):
        return self.points
    
    def set_points(self, p):
        self.points = p
        self.pos = [(p[0][0] + p[1][0]) / 2.0, (p[0][1] + p[1][1]) / 2.0]
        self.dimensions = [p[1][0] - p[0][0], self.image_size[1]]
        
    def set_pos(self, p):
        n = p[0] - self.pos[0]
        self.set_points([[self.points[0][0] + n, p[1]], [self.points[1][0] + n, p[1]]])
        
    def get_orig_state(self):
        return self.orig_state
    
    def set_orig_state(self, o):
        self.orig_state = o
        
    def get_dimensions(self):
        return self.dimensions
    
    def set_dimensions(self, d):
        self.dimensions = d
        
    def get_orig_points(self):
        return self.orig_points
    
    def set_orig_points(self, o):
        self.orig_points = o
        
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, o):
        self.orig_pos = o
        
    def get_orig_vel(self):
        return self.orig_vel
    
    def set_orig_vel(self, v):
        self.orig_vel = v
    
class PeriodicImage(StableObject):
    def __init__(self, pos, vel, image, image_center, image_size, interval, wait, tiles, rotation = 0, rotation_speed = 0, bonus = False, scale = 1, sound = None):
        self.wait = wait
        self.tiles = tiles
        self.rotation = rotation
        self.rotation_speed = rotation_speed
        self.bonus = bonus
        self.r = rotation
        self.t = 0
        self.tile = 0
        StableObject.__init__(self, pos, vel, image, image_center, image_size, image_size[1], interval, "White", scale, sound)
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        
    def __str__(self):
        a = "PERIODIC IMAGE: " + "\n"
        a += "Wait: " + str(self.wait) + "\n"
        a += "Tiles: " + str(self.tiles) + "\n"
        a += "Rotation: " + str(self.rotation) + "\n"
        a += "Rotation Speed: " + str(self.rotation_speed) + "\n"
        a += "Bonus: " + str(self.bonus) + "\n"
        a += "r: " + str(self.r) + "\n"
        a += "t: " + str(self.t) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
    
    def draw(self, canvas):
        self.update()
        canvas.draw_image(self.image, [self.image_center[0] + self.tile * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r)
        if self.bonus:
            canvas.draw_image(self.image, [self.image_center[0] + (self.tile + 3) * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r + .9)
        self.t += 1
        if self.t == self.wait:
            self.tile = (self.tile + 1) % self.tiles
            self.t = 0
            self.r += self.rotation_speed
    
class UnstableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction = 0, scale = 1, sound = None):
        self.gravity = gravity
        self.speed = speed
        self.jump_height = jump_height
        self.direction = direction
        self.bonus_vel = 0
        self.num_jumps = 0
        self.max_jumps = 2
        self.tile = [0, 0]
        self.count = 0
        self.moving = False
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
    
    def __str__(self):
        a = "UNSTABLE OBJECT: " + "\n"
        a += "Gravity: " + str(self.gravity) + "\n"
        a += "Speed: " + str(self.speed) + "\n"
        a += "Jump Height: " + str(self.jump_height) + "\n"
        a += "Direction: " + str(self.direction) + "\n"
        a += "Bonus Velocity: " + str(self.bonus_vel) + "\n"
        a += "Num Jumps: " + str(self.num_jumps) + "\n"
        a += "Max Jumps: " + str(self.max_jumps) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "Count: " + str(self.count) + "\n"
        a += "Moving: " + str(self.moving) + "\n"
        a += "\n"
        return Object.__str__(self) + a
    
    # Key Methods
    def update(self):
        self.move()
    
    def move(self):
        self.vel[1] += self.gravity
        self.vel[0] = self.direction * self.speed + self.bonus_vel
        self.bonus_vel = 0
        Object.move(self)
        
    def next_pos(self):
        ans = [0, 0]
        ans[1] = self.pos[1] + self.vel[1] + self.gravity
        ans[0] = self.pos[0] + self.vel[0]
        return ans
    
    def jump(self):
        if self.num_jumps < self.max_jumps:
            self.vel[1] = -math.sqrt(math.fabs(2 * self.gravity * self.jump_height))
            self.is_falling = True
            self.num_jumps += 1
            if self.sound != None:
                self.sound.rewind()
                self.sound.play()
    
    def draw(self, canvas, offset):
        if self.direction == -1:
            self.tile[1] = 1
        elif self.direction == 1:
            self.tile[1] = 0
        if self.num_jumps > 0:
            if self.vel[1] > 0:
                self.tile[0] = 2
            elif self.vel[1] < 0:
                self.tile[0] = 1
            else:
                self.tile[0] = 0
        elif self.direction != 0:
            if not self.moving:
                self.count = 8
                self.moving = True
            else:
                self.count += 1
            if self.count > 8:
                self.tile[0] = (self.tile[0] + 1) % 3
                self.count = 0
        else:
            self.tile[0] = 0
            self.count = 0
            self.moving = False
        
        canvas.draw_image(self.image, [self.image_center[0] + self.tile[0] * self.image_size[0], self.image_center[1] + self.tile[1] * self.image_size[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_gravity(self):
        return self.gravity
    
    def set_gravity(self, g):
        self.gravity = g
        
    def get_speed(self):
        return self.get_speed
    
    def set_speed(self, s):
        self.speed = s
        
    def get_jump_height(self):
        return self.jump_height
    
    def set_jump_height(self, j):
        self.jump_height = j
    
    def get_direction(self):
        return self.direction
    
    def set_direction(self, d):
        self.direction = d
        
    def get_bonus_vel(self):
        return self.bonus_vel
    
    def set_bonus_vel(self, v):
        self.bonus_vel = v
        
    def get_num_jumps(self):
        return self.num_jumps
    
    def set_num_jumps(self, n):
        self.num_jumps = n
        
    def get_max_jumps(self):
        return self.max_jumps
    
    def set_max_jumps(self, m):
        self.max_jumps = m
        
    def get_tile(self):
        return self.tile
    
    def set_tile(self, t):
        self.tile = t
        
    def get_count(self):
        return self.count
    
    def set_count(self, c):
        self.count = c
        
    def get_moving(self):
        return self.moving
        
    def set_moving(self, m):
        self.moving = m
        
class Animal(UnstableObject):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, controls, direction = 0, scale = 1, num_treats = 2, sound = None):
        self.treats = [None, None]
        self.num_treats = num_treats
        self.treats = []
        for i in range(self.num_treats):
            self.treats.append(None)
        # 0 = left, 1 = right, 2 = jump, 3 = throw
        self.controls = controls
        self.control_state = [False, False, False, False]
        self.orig_pos = [pos[0], pos[1]]
        UnstableObject.__init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction, scale, sound)
        
    def __str__(self):
        a = "ANIMAL:" + "\n"
        a += "Num Treats: " + str(self.num_treats) + "\n"
        a += "Treats: " + str(self.treats) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        a += "Control State: " + str(self.control_state) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return UnstableObject.__str__(self) + a
        
    # Key Methods        
    def reset(self):
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [0, 0]
        self.direction = 0
        self.clear_treats()
        self.control_state = [False, False, False, False]
        self.num_jumps = 0
    
    def collect(self, treat):
        t = self.treats[0]
        if t != None:
            t.drop()
        self.treats.pop(0)
        self.treats.append(treat)
        treat.collect()
        return t
     
    def drop_treat(self):
        popped = False
        for i in range(self.num_treats):
            if self.treats[i] != None and not popped:
                self.treats[i].drop()
                self.treats.pop(i)
                self.treats.insert(i, None)
                popped = True
    
    def key_handler(self, key, sign):
        for i in range(0, 4):
            if key == simplegui.KEY_MAP[self.controls[i]]:
                if sign == 'down':
                    self.control_state[i] = True
                    self.update_direction()
                elif sign == 'up':
                    self.control_state[i] = False
                    self.update_direction()
                else:
                    print("Error: Animal.key_handler(): incorrect sign")
                    
    def update_direction(self):
        if self.control_state[0] and not self.control_state[1]:
            self.direction = -1
        elif not self.control_state[0] and self.control_state[1]:
            self.direction = 1
        else:
            self.direction = 0
        if self.control_state[2]:
            self.jump()
            self.control_state[2] = False
        if self.control_state[3]:
            self.drop_treat()
            self.control_state[3] = False
            
    # Accessor Methods
    def get_treats(self):
        return self.treats
    
    def clear_treats(self):
        for i in range(0, len(self.treats)):
            self.drop_treat() 
            
    def get_num_treats(self):
        return self.num_treats
    
    def set_num_treats(self, n):
        self.num_treats = n
        self.clear_treats()
    
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, p):
        self.orig_pos = p
  



import codeskulptor


# -----------------------
# Images and Sound
# -----------------------

# Sound
menu_music = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Menu.m4a"))
arcade_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Arcade.m4a"))
arcade_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_ArcadeMid.m4a"))
puzzle_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 
puzzle_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 

bounce_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Bounce.m4a"))
brring_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Brring.m4a"))
button_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Button.m4a"))

bounce_sound = None
button_sound = None

# Images
fixed_text_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Font.png"))
button_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Buttons.png"))
minibutton_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Minibuttons.png"))
platform_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")),simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_BasicPlatforms.png"))]
animal_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Bunnies.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Squirrel.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_PlainBall.png"))]
treat_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Carrots.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Acorns.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_TreatBalls.png"))]
sparkle_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Sparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_RedSparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_BlueSparkles.png"))]
star_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Star.png"))

title_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Title.png"))
instructions_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Instructions.png"))
arcade_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Arcade.png"))
level_select_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelSelect.png"))
high_scores_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_HighScores.png"))
options_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Options.png"))
credits_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Credits.png"))
new_high_score_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_NewHighScore.png"))

easy_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Easy.png"))
medium_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Medium.png"))
hard_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Hard.png"))
paused_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Pause.png"))

game_over_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_GameOver.png"))
win_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_ArcadeWin.png"))
level_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelWin.png"))
final_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_AllWin.png"))

# -----------------------
# Class Definitions
# -----------------------
       
class Menu:
    def __init__(self, screen, buttons = []):
        self.buttons = buttons
        self.screen = screen
        self.index = [0, 0]
        if self.buttons != None:
            self.buttons[0][0].set_selected(True)
     
    def __str__(self):
        a = "MENU:" + "\n"
        a += "Index: " + str(self.index) + "\n"
        a += "    Buttons: " + "\n"
        for c in self.buttons:
            for b in c:
                a += str(b)
        a += "    Screen: " + "\n" + str(self.screen)
        a += "\n"
        return a
            
    def draw(self, canvas):
        self.screen.draw(canvas)
        for l in self.buttons:
            for b in l:
                b.draw(canvas)
                   
    def keyhandler(self, key):
        if key == simplegui.KEY_MAP['down']:
            if self.index[0] < len(self.buttons) - 1:
                self.set_cur_button(False)
                self.index[0] += 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['up']:
            if self.index[0] > 0:
                self.set_cur_button(False)
                self.index[0] -= 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['right']:
            if self.index[1] < len(self.buttons[self.index[0]]) - 1:
                self.set_cur_button(False)
                self.index[1] += 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['left']:
            if self.index[1] > 0:
                self.set_cur_button(False)
                self.index[1] -= 1
                self.set_cur_button(True)
        elif key == 13:
            self.activate_cur_button()
               
    def click(self, pos):
        for a in self.buttons:
            for b in a:
                b.set_selected(False)
                if b.in_button(pos):
                    b.activate()
                    b.set_selected(True)
                
    def get_screen(self):
        return self.screen
    
    def set_screen(self, s):
        self.screen = s
        
    def get_buttons(self):
        return self.buttons
        
    def set_buttons(self, b):
        self.buttons = b
        self.index = [0, 0]
        self.set_cur_button(True)
        
    def get_index(self):
        return self.index
    
    def set_index(self, i):
        self.index = i
        
    def set_cur_button(self, b):
        self.buttons[self.index[0]][self.index[1]].set_selected(b)
        
    def activate_cur_button(self):
        self.buttons[self.index[0]][self.index[1]].activate()
        
class Screen:
    def __init__(self, images, stable_objects, text):
        #[image, center_source, width_height_source, center_dest, width_height_dest, rotation]
        self.images = images
        self.stable_objects = stable_objects
        self.text = text
    
    def __str__(self):
        a = "SCREEN:" + "\n"
        a += "Images: " + str(self.images) + "\n"
        if self.stable_objects != None:
            a += "    Stable Objects: " + "\n"
            for s in self.stable_objects:
                a += str(s)
        else:
            a += "Stable Objects: None" + "\n"
        if self.text != None:
            a += "    Text: " + "\n"
            for t in self.text:
                a += str(t)
        else:
            a += "Text: None" + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if self.images != None:
            for i in self.images:
                canvas.draw_image(i[0], i[1], i[2], i[3], i[4], i[5])
        if self.stable_objects != None:
            for s in self.stable_objects:
                s.update()
                if type(s) == PeriodicImage:
                    s.draw(canvas)
                else:
                    s.draw(canvas, [0, 0])
        if self.text != None:
            for t in self.text:
                t.draw(canvas)
 
    def get_images(self):
        return self.images
    
    def set_images(self, i):
        self.images = i
        
    def get_stable_objects(self):
        return self.stable_objects
    
    def set_stable_objects(self, s):
        self.stable_objects = s
        
    def get_text(self):
        return self.text
    
    def set_text(self, t):
        self.text = t
                
class Text:
    def __init__(self, text_list, pos, size, color, grid = False):
        self.text_list = text_list
        self.pos = pos
        self.size = size
        self.color = color
        self.grid = grid
        self.fixed_text = fixed_text_image
        self.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .:0123456789_"
     
    def __str__(self):
        a = "TEXT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Text List: " + str(self.text_list) + "\n"
        a += "Size: " + str(self.size) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Grid: " + str(self.grid) + "\n"
        a += "\n"
        return a
        
    def draw(self, canvas):
        i = 1
        for t in self.text_list:
            y_offset = i * (self.size)
            if not self.grid:
                canvas.draw_text(t, [self.pos[0], self.pos[1] + y_offset], self.size, self.color)
            else:
                width = 20
                height = 40
                center = [12, 23]
                offset = 10
                n = 0
                while n < len(t):
                    canvas.draw_image(self.fixed_text, [center[0] + ((width + 4) * self.chars.index(t[n])), center[1]], [width, height], [self.pos[0] + offset, self.pos[1] + y_offset], [width, height])
                    offset += 25
                    n += 1
            i += 1
    
    def get_text_list(self):
        return self.text_list
    
    def set_text_list(self, t):
        self.text_list = t
        
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_size(self):
        return self.size
    
    def set_size(self, s):
        self.size = s
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
      
class Button:
    def __init__(self, pos, image, image_center, image_size, action):
        self.pos = pos
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.action = action
        self.selected = False
        self.sound = button_sound
    
    def __str__(self):
        a = "BUTTON:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Action: " + str(self.action) + "\n"
        a += "Selected: " + str(self.selected) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if not self.selected:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size)
        else:
            canvas.draw_image(self.image, [self.image_center[0], self.image_center[1] + self.image_size[1]], self.image_size, self.pos, self.image_size)
        
    def activate(self):
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        self.action()
    
    def in_button(self, pos):
        if pos[0] < self.pos[0] + self.image_size[0] / 2 and pos[0] > self.pos[0] - self.image_size[0] / 2:
            if pos[1] < self.pos[1] + self.image_size[1] / 2 and pos[1] > self.pos[1] - self.image_size[1] / 2:
                return True
        return False
    
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_image(self):
        return self.image
    
    def get_image_center(self):
        return self.image_center
    
    def get_image_size(self):
        return self.image_size
    
    def set_image(self, i, c, s):
        self.image = i
        self.image_center = c
        self.image_size = s
        
    def get_action(self):
        return self.action
    
    def set_action(self, a):
        self.action = a
       
    def get_selected(self):
        return self.selected
    
    def set_selected(self, s):
        self.selected = s
        
    def switch_selected(self):
        self.selected = not self.selected
        return self.selected
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s

class Game:
    def __init__(self, level, controls, theme):
        
        self.easy_screen = Screen([[easy_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.medium_screen = Screen([[medium_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.hard_screen = Screen([[hard_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        paused_screen = Screen([[paused_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.platform_images = platform_images
        self.animal_images = animal_images
        self.treat_images = treat_images
        resume_button = Button([300, 350], button_image, [3875, 50], [251, 100], lambda : self.unpause())
        return_button = Button([600, 350], button_image, [125, 50], [251, 100], lambda : self.return_to_title())
        self.pause_menu = Menu(paused_screen, [[resume_button, return_button]])
            
        self.animal = None
        self.theme_index = theme
        self.controls = controls
        self.yellow_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[0], [34, 35], [70, 70], 1, 3, 7, 0, .05, True, 1.5)
        self.pink_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[1], [34, 35], [70, 70], 1, 3, 7, math.pi / 3, .05, True, 1.5)
        self.blue_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[2], [34, 35], [70, 70], 1, 3, 7, 2 * math.pi / 3, .05, True, 1.5)
        self.sparkles = [self.yellow_sparkle, self.pink_sparkle, self.blue_sparkle]
        
        self.goal_sound = brring_sound
        
        self.camera_offset = [0, 0]
        self.levels = []
        self.next_level_timer = simplegui.create_timer(1000, self.level_end)
        
        self.level = level
        self.level_max = 900
        self.treats = []
        self.platforms = []
        self.text = None
        self.screen = None
        
        self.in_level = False
        self.is_ending = False
        self.paused = False
        self.start_game()
    
    def __str__(self):
        a = "GAME:" + "\n"
        a += "Level: " + str(self.level) + "\n"
        a += "In Level: " + str(self.in_level) + "\n"
        a += "Is Ending: " + str(self.is_ending) + "\n"
        a += "Paused: " + str(self.paused) + "\n"
        a += "Theme Index: " + str(self.theme_index) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        return a
    
    def create_levels(self):
        self.levels = []
        for i in range(31):
            self.levels.append([["Platforms"], ["Treats"], "Text"])
            
        treat_scale = 1.2
        text_color = "Black"

        self.levels[0][0] = [14, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[190, 218], [294, 218]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[566, 220], [668, 220]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[577, -94], [682, -94]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[582, -413], [689, -413]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[597, -730], [690, -730]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[182, -86], [299, -86]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[184, -402], [305, -402]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[186, -724], [310, -724]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[405, 130], [483, 130]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[411, -165], [477, -165]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[438, -488], [496, -488]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[444, -854], [500, -854]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[375, -1099], [561, -1099]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[0][1] = [1, [467, -1302], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[0][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        
        self.levels[1][0] = [1, [[350, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[1][1] = [1, [600, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[1][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        self.levels[2][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 350], [800, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[2][1] = [1, [700, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[2][2] = ["Jump using the '" + self.controls[2] + "' key!", [250, 400], 30, text_color]
        self.levels[3][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[700, 350], [900, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[3][1] = [1, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[3][2] = ["Tap '" + self.controls[2] + "' again while in the air to double-jump!", [200, 400], 30, text_color]
        self.levels[4][0] = [2, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[408.5, 178], [493.5, 178]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[4][1] = [1, [455, -29.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1], False, treat_scale]
        self.levels[4][2] = ["Wait for the second jump until you start to fall!", [100, 450], 30, text_color]
        self.levels[5][0] = [4, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[524, 242], [633, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[670, 84], [756, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[970, 90], [1050, 90]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[5][1] = [1, [1049, -109], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3], False, treat_scale]
        self.levels[5][2] = ["You can go further than you think!", [300, 450], 30, text_color]
        self.levels[6][0] = [2, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False]
        self.levels[6][1] = [2, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale]
        self.levels[6][2] = ["Obtain the treats to affect similarly colored platforms!", [10, 400], 30, text_color]
        self.levels[7][0] = [3, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[650, 350], [800, 350]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[1100, 350], [1300, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[7][1] = [2, [1200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale]
        self.levels[7][2] = ["Some platforms move when activated!", [200, 400], 30, text_color]
        self.levels[8][0] = [4, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[650, 350], [800, 350]], [.5, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, False, [[1100, 650], [1300, 650]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[8][1] = [3, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [350, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [1200, 600], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[8][2] = ["There can be more than one treat and platform!", [50, 400], 30, text_color]
        self.levels[9][0] = [7, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 300], [700, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[750, 300], [850, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[900, 300], [1000, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[1050, 300], [1150, 300]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[1300, 0], [1400, 0]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1200, 300], [1300, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[9][1] = [3, [350, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 2, 3], False, treat_scale, [1250, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [1350, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[9][2] = ["You can pause at any time by pressing the 'p' key!", [400, 400], 30, text_color]
        self.levels[10][0] = [6, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 200], [700, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[700, 50], [800, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[800, -100], [900, -100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[900, -250], [1000, -250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, False, [[1000, -400], [1100, -400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[10][1] = [5, [550, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale, [650, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [1050, -450], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [750, 0], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [850, -150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale]
        self.levels[10][2] = ["You can only hold 2 treats at a time!", [200, 400], 30, text_color]
        self.levels[11][0] = [5, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[399, 217], [508, 217]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[301, 64], [383, 64]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[164, -69], [258, -69]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[163, -240], [258, -240]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[11][1] = [5, [210, -429.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [328, 364], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [577, 361], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [450, 87.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [343, -26.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale]
        self.levels[11][2] = ["Sometimes the treats form a puzzle!", [200, 450], 30, text_color]
        self.levels[12][0] = [8, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[210, 275], [340, 275]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[551, 278], [668, 278]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[348, 135], [550, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[217, -1], [338, -1]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[555, -5], [666, -5]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[346, -149], [552, -149]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[397.5, -307], [494.5, -307]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[12][1] = [5, [443, -437.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 3, 6], False, treat_scale, [529, 106.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [362, 108], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4], False, treat_scale, [364, 376.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 7], False, treat_scale, [530, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[12][2] = ["The solution might not be obvious right away!", [150, 450], 30, text_color]
        self.levels[13][0] = [2, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1056, 222], [1165, 222]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[13][1] = [5, [541, 340], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [699, 372], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [999, 368], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [857, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [1117, 99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[13][2] = ["You may not want to get every treat!", [300, 450], 30, text_color]
        self.levels[14][0] = [7, [[249, 410], [649, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[259, 224], [352, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[552, 224], [640, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[573, 55], [657, 55]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[254, 52], [350, 52]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[388, -66], [501, -66]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[392, -253], [497, -253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False]
        self.levels[14][1] = [5, [558, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [617, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale, [353, 383], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [279, 382], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3, 6], False, treat_scale, [442, -431.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 5], False, treat_scale]
        self.levels[14][2] = ["You can use the '" + self.controls[3] + "' key to drop unwanted treats!", [50, 450], 30, text_color]
        self.levels[15][0] = [5, [[200, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[400, 50], [500, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[50, 350], [150, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[750, 350], [850, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[15][1] = [5, [450, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [650, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [100, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [250, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [3], False, treat_scale, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale]
        self.levels[15][2] = ["Good luck!", [370, 400], 30, text_color]
        self.levels[16][0] = [6, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[437, 257], [557, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[437, 99], [549, 99]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[88, 283], [214, 283]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-133, 166], [-7, 166]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-359, 48], [-218, 48]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[16][1] = [4, [625, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [551, 366.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 4], False, treat_scale, [487, -99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [-288, -127], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[16][2] = ["", [300, 600], 30, "Silver"]
        self.levels[17][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[560, 86], [648, 86]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[676, 399], [822, 399]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 2, False, True, [[678, 88], [859, 88]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 3, False, True, [[350, 87], [505, 87]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 4, False, True]
        self.levels[17][1] = [4, [282, 350], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [598, -56], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [1052, -127.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [41, -67.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[17][2] = ["", [300, 600], 30, "Silver"]
        self.levels[18][0] = [11, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-181, 399], [-92, 399]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1003, 410], [1078, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[371, 135], [525, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[247, 670], [669, 670]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-45, 408], [183, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[687, 421], [981, 421]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[368, 545], [528, 545]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[381, 267], [518, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[77, 728], [260, 728]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-195, 731], [-128, 731]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 6, False, False]
        self.levels[18][1] = [7, [447, 636.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-141, 349.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [7], False, treat_scale, [611, 369], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [6], False, treat_scale, [275, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [5], False, treat_scale, [453, 34.41408904452442], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [261, 646.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9], False, treat_scale, [-48, 672], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [10], False, treat_scale]
        self.levels[18][2] = ["", [300, 600], 30, "Silver"]
        self.levels[19][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[114, 668], [243, 668]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[120, 492], [234, 492]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[972, 91], [1052, 91]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[681, 109], [832, 109]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True]
        self.levels[19][1] = [4, [1010, 63.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [117, 631], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [237, 632.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [272, 359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale]
        self.levels[19][2] = ["", [300, 600], 30, "Silver"]
        self.levels[20][0] = [9, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[404, 676], [465, 676]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[759, 685], [887, 685]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-8, 682], [110, 682]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[154, 535], [312, 535]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[584, 546], [766, 546]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[369, 212], [548, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[203, 869], [264, 869]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[578, 873], [633, 873]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[20][1] = [6, [825, 633.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [5], False, treat_scale, [38, 636], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 641.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [6, 7, 8], False, treat_scale, [465, 91.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [232, 840], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [606, 844], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale]
        self.levels[20][2] = ["", [300, 600], 30, "Silver"]
        self.levels[21][0] = [7, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[416.5, 272], [499.5, 272]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[533, 182], [649, 182]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[682.5, 88], [789.5, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[262, 181], [372, 181]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[133, 89], [247, 89]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[429, 87], [487, 87]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 7, False, False]
        self.levels[21][1] = [7, [269, 107.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [629, 102.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [524, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [1], False, treat_scale, [764, 7], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [109, 17], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [6], False, treat_scale, [448, -171.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [504, 237.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[21][2] = ["", [300, 600], 30, "White"]
        self.levels[22][0] = [13, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[610, 501], [773, 501]], [1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 4, False, True, [[767, 400], [907, 400]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 5, False, True, [[619, 270], [771, 270]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, True, [[93, 271], [240, 271]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 7, False, True, [[-19, 397], [121, 397]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[77, 502], [279, 502]], [-1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, True, [[372, 222], [521, 222]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, True, [[377, -71], [516, -71]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-336, 727], [-257, 727]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-243, 654], [-150, 654]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 7, False, False, [[1109, 754], [1193, 754]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1062, 638], [1144, 638]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 2, False, False]
        self.levels[22][1] = [8, [322, 399], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [380, 405.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [539, 407.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [605, 394.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [1002, 697], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3, 12], False, treat_scale, [980, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [7], False, treat_scale, [441, -312.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-303, 661], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [4, 10], False, treat_scale]
        self.levels[22][2] = ["", [300, 600], 30, "Silver"]
        self.levels[23][0] = [15, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[332, 286], [549, 286]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[137, 135], [290, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[554, 132], [706, 132]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-91, 123], [31, 123]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 160, 3, False, True, [[-308, 120], [-155, 120]], [0, 0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 480, 3, False, True, [[-476, 142], [-365, 142]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[-668, 427], [-537, 427]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[789, 132], [1053, 132]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 4, False, True, [[1120, 408], [1304, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1329, 224], [1403, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1512, 123], [1619, 123]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1705, -7], [1781, -7]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[-5, 460], [130, 460]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-319, 463], [-258, 463]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[23][1] = [8, [334, 251], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [530, 244], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3], False, treat_scale, [128, 55], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4, 5, 6], False, treat_scale, [689, 55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-607, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9, 10, 11, 12], False, treat_scale, [1739, -67], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-341, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [14], False, treat_scale, [-99, 314.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [13], False, treat_scale]
        self.levels[23][2] = ["", [300, 600], 30, "Silver"]
        self.levels[24][0] = [11, [[50, 400], [850, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[14, 88], [162, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[370, 94], [527, 94]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[752, 92], [876, 92]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[532, 253], [732, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[147, 244], [369, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[890, 242], [1031, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-199, 244], [-17, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[541, -84], [747, -84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[134, -105], [355, -105]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[356, -226], [561, -226]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[24][1] = [8, [107, 352], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [259, 358.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [7, 9], False, treat_scale, [618, 362], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [5], False, treat_scale, [799, 354], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [8], False, treat_scale, [814, 39.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [10], False, treat_scale, [78, 30.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 52], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [464, -466], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[24][2] = ["", [300, 600], 30, "Silver"]
        self.levels[25][0] = [6, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[131.5, 257], [216.5, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[278, 257], [344, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[539, 255], [595, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[662.5, 253], [737.5, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[413, 200], [481, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False]
        self.levels[25][1] = [5, [436, -55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [319, 185.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4, 3], False, treat_scale, [724, 183], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [1], False, treat_scale, [570, 185], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [149, 190.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale]
        self.levels[25][2] = ["", [300, 450], 30, "White"] 
        self.levels[26][0] = [18, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[181, 519], [431, 519]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[487, 521], [701, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-73, 520], [115, 520]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[92, 621], [198, 621]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[411, 626], [510, 626]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[773, 522], [981, 522]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[693, 627], [795, 627]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[37, 396], [168, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-89, 221], [25, 221]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[138, 220], [281, 220]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[591, 212], [737, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[867, 208], [1003, 208]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[754, 396], [888, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[4, 80], [148, 80]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[270, 79], [630, 79]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[726, 84], [894, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[150, -78], [738, -78]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[26][1] = [7, [741, 598], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [16], False, treat_scale, [740, 559], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [10, 11], False, treat_scale, [460, 603], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [12, 14], False, treat_scale, [460, 561.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [13], False, treat_scale, [145, 602.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [15], False, treat_scale, [141, 566.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8, 9], False, treat_scale, [449, -297], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[26][2] = ["", [300, 600], 30, "Silver"]
        self.levels[27][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[376, 267], [513, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[391, 109], [506, 109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[-8, 398], [144, 398]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-501, 255], [-345, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[734, 404], [910, 404]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[1365, 400], [1497, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-501, 395], [-345, 395]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-31, 521], [62, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-209, 480], [-159, 480]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[27][1] = [8, [447, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale, [-426, 65.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [5], False, treat_scale, [1480, 229], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [289, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [6], False, treat_scale, [520, 369.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1, 4], False, treat_scale, [576, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [-190, 447.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [9], False, treat_scale, [-57, 516.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [8], False, treat_scale]
        self.levels[27][2] = ["", [300, 600], 30, "Silver"]
        self.levels[28][0] = [12, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[158, 233], [400, 233]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[489, 235], [709, 235]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[274, 158], [618, 158]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[493, 87], [709, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[170, 87], [404, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[689, 163], [917, 163]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[775, 241], [985, 241]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-30, 157], [205, 157]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-146, 239], [71, 239]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[384, -83], [510, -83]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[392, -225], [512, -225]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[28][1] = [13, [514, 206], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [11], False, treat_scale, [806, 209], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [10], False, treat_scale, [892, 214.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [336, 128], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [-57, 220.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [None], False, treat_scale, [36, 209.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [183, 133], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [362, 207], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [245, 211.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [551, 131.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [728, 132], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [645, 212.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [449, -444.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], False, treat_scale]
        self.levels[28][2] = ["", [300, 600], 30, "White"]
        self.levels[29][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[342, 204], [573, 204]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[141, 31], [315, 31]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-2, -119], [196, -119]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[352, -109], [582, -109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, True, False, [[602, 36], [760, 36]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[777, -120], [951, -120]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[584, -293], [768, -293]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[176, -300], [349, -300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[346, -469], [575, -469]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[29][1] = [9, [461, -629], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [258, -349], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [7], False, treat_scale, [678, -339], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], True, treat_scale, [867, -157.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8], False, treat_scale, [307, 371.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale, [225, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [607, 375], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [6], False, treat_scale, [674, 384.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale, [677, -359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale]
        self.levels[29][2] = ["", [300, 600], 30, "Silver"]
        self.levels[30][0] = [6, [[0, 300], [200, 300]], [.5, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 60, 2, False, False, [[200, 200], [400, 200]], [0, .3], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 3, False, False, [[400, 500], [600, 500]], [0, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 0, False, True, [[200, 500], [400, 500]], [-.5, -.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 1, False, False, [[-100, 100], [0, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False, [[100, 100], [200, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False]
        self.levels[30][1] = [5, [200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [0], False, treat_scale, [400, 200], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [600, 400], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [600, 100], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4, 5], False, treat_scale, [-150, -25], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[30][2] = ["", [300, 600], 30, "White"] 
        
    def start_game(self):
        self.create_levels()
        self.animal = Animal([450, 300], [0,0], self.animal_images[self.theme_index], [22, 26], [45, 52], 21, .5, 3, 120, self.controls, 0, 1, 2, bounce_sound)
        self.get_level()
        self.in_level = True
    
    def main(self, canvas):
        pass
    
    def update(self):
        
        self.animal.update()
        
        for p in self.platforms:
            p.collide(self.animal)
            p.update()
        for t in self.treats:
            t.update()
            t.collide(self.animal)
            
        p = self.animal.get_pos()
        self.camera_offset = [450 - p[0], 300 - p[1]]
        
        if p[1] > self.level_max:
            self.reset_level()
    
    def draw(self, canvas):
        
        # Scene
        self.screen.draw(canvas)
        canvas.draw_text(self.text[0], [self.text[1][0] + self.camera_offset[0], self.text[1][1] + self.camera_offset[1]], self.text[2], self.text[3])
        
        # Objects
        self.animal.draw(canvas, self.camera_offset)
        for p in self.platforms:
            p.draw(canvas, self.camera_offset)
        for t in self.treats:
            t.draw(canvas, self.camera_offset)

        # Current Treats Box
        canvas.draw_polygon([(25, 30), (100, 30), (100, 70), (25, 70)], 5, "White")
        t = self.animal.get_treats()
        for i in range(len(t)):
            if t[i] != None:
                if t[i].get_color() == 0 and self.in_level:
                    self.in_level = False
                    self.is_ending = True
                    self.next_level_timer.start()
                    self.goal_sound.rewind()
                    self.goal_sound.play()
                    for s in self.sparkles:
                        s.set_pos([t[i].get_pos()[0] + self.camera_offset[0], t[i].get_pos()[1] + self.camera_offset[1]])
                else:
                    t[i].draw(canvas, [44 + 35 * i - t[i].get_pos()[0], 50 - t[i].get_pos()[1]], True)
                    
        # Display
        canvas.draw_text("Level: " + str(self.level), [110, 70], 40, "White")
        
        # Sparkles
        if self.is_ending:
            for s in self.sparkles:
                s.draw(canvas)

    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['P']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
            
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
    
    def keyup_handler(self, key):
        if self.in_level and not self.paused:
            self.animal.key_handler(key, 'up')
        
    def unpause(self):
        self.paused = False
        
    def level_end(self):
        pass
    
    def next_level(self):
        if self.level < len(self.levels) - 1:
            self.level += 1
            self.in_level = True
            self.animal.reset()
            self.treats = []
            self.platforms = []
            self.get_level()
    
    def reset_level(self):
        self.animal.reset()
        for p in self.platforms:
            p.reset_points()
    
    def get_level(self):
        n = 9 # number of parameters for a platform
        for i in range(self.levels[self.level][0][0]):
            self.platforms.append(Platform(self.levels[self.level][0][n*i+1], self.levels[self.level][0][n*i+2], self.levels[self.level][0][n*i+3], self.levels[self.level][0][n*i+4], self.levels[self.level][0][n*i+5], self.levels[self.level][0][n*i+6], self.levels[self.level][0][n*i+7], self.levels[self.level][0][n*i+8], self.levels[self.level][0][n*i+9]))
        n = 9 # number of parameters for a treat
        for i in range(self.levels[self.level][1][0]):
            p = []
            for x in self.levels[self.level][1][n*i+7]:
                if x == None:
                    p = None
                else:
                    p.append(self.platforms[x])
            self.treats.append(Treat(self.levels[self.level][1][n*i+1], self.levels[self.level][1][n*i+2], self.levels[self.level][1][n*i+3], self.levels[self.level][1][n*i+4], self.levels[self.level][1][n*i+5], self.levels[self.level][1][n*i+6], p, self.levels[self.level][1][n*i+8], self.levels[self.level][1][n*i+9]))
        self.text = self.levels[self.level][2]
        if self.level <= 10:
            self.screen = self.easy_screen
        elif self.level <= 20:
            self.screen = self.medium_screen
        else:
            self.screen = self.hard_screen
        
    def return_to_title(self):
        self.stop_music()
             
    def play_music(self):
        self.music1_timer.stop()
        self.music1.rewind()
        self.music1.play()
        self.music1_timer.start()
        
    def replay_music(self):
        self.music1_timer.stop()
        self.music2_timer.stop()
        self.music2.rewind()
        self.music2.play()
        self.music2_timer.start()
        
    def stop_music(self):
        self.music1.pause()
        self.music2.pause()
        self.music1_timer.stop()
        self.music2_timer.stop()
        
     
class PuzzleGame(Game):
    def __init__(self, level, controls, theme, runner):
        Game.__init__(self, level, controls, theme)
        
        self.music1_timer = simplegui.create_timer(520000, self.replay_music)
        self.music1 = puzzle_music1
        self.music2_timer = simplegui.create_timer(520000, self.replay_music)
        self.music2 = puzzle_music2
        self.play_music()
        
        g = Treat([450, 230], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, None, False, 1.2)
        level_screen = Screen([[level_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], [g], None)
        final_screen = Screen([[final_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        
        next_button = Button([625, 350], button_image, [625, 50], [251, 100], self.next_level)
        replay_button = Button([275, 350], button_image, [375, 50], [251, 100], self.replay_level)
        self.level_menu = Menu(level_screen, [[replay_button, next_button]])
        self.final_menu = Menu(final_screen, [[replay_button]])
        
    def __str__(self):
        a = "PUZZLE GAME:" + "\n"
        a += "Num Levels: " + str(len(self.levels) - 1) + "\n"
        a += "\n"
        return Game.__str__(self) + a
        
    def main(self, canvas):
        if self.paused:
            self.pause_menu.draw(canvas)
        elif self.in_level:
            self.update()
            self.draw(canvas)
        elif self.is_ending:
            self.draw(canvas)
        elif self.level == len(self.levels) - 1:
            self.final_menu.draw(canvas)
        else:
            self.level_menu.draw(canvas)
        
    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['p']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
        elif self.level == len(self.levels) - 1:
            self.final_menu.keyhandler(key)
        else:
            self.level_menu.keyhandler(key)
        
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
        elif self.in_level:
            pass
        elif self.level == len(self.levels) - 1:
            self.final_menu.click(pos)
        else:
            self.level_menu.click(pos)
        
    def replay_level(self):
        self.reset_level()
        self.in_level = True
        
    def level_end(self):
        self.next_level_timer.stop()
        self.is_ending = False
        
         
# -----------------------
# Starting Game and Frame
# -----------------------
    
width = 900
height = 600

frame = simplegui.create_frame("Bunny's Big Adventure!", width, height, 100)

_controls = ['left', 'right', 'up', 'space']
_theme = 0
_puzzle_game = PuzzleGame(1, _controls, _theme, 0)

frame.set_draw_handler(_puzzle_game.main)
frame.set_keydown_handler(_puzzle_game.keydown_handler)
frame.set_keyup_handler(_puzzle_game.keyup_handler)
frame.set_mouseclick_handler(_puzzle_game.click)

frame.set_canvas_background("Green")
frame.start()
        
        
        
        
def deserialize(string, splitters=[' ', ';', ',']):
    lst = []
    for sub_str in string.split(splitters[0]):
        if sub_str[0] == 'T' or sub_str[0] == 'F':
            lst.append(bool(sub_str))
        elif sub_str[0] == '[' and sub_str[-1] == ']':
            lst.append(deserialize(sub_str[1:-1], splitters[1:]))
        else:
            lst.append(int(sub_str))
    return lst


print(deserialize("12 11 7 5 [[12,3];25] 49"))


# Bunny's Big Adventure!
# Created by: Jenna Netland
# Copyright (c) 2012 All Rights Reserved, Jenna Netland
# All images and music are also Copyright (c) 2012 All Rights Reserved, Jenna Netland

# Good luck, and hope you enjoy :)


# Copyright (c) 2012 All Rights Reserved, Jenna Netland

import math
import random
import simplegui

class Object:
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, scale = 1, sound = None):
        self.pos = pos
        self.vel = vel
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.image_radius = image_radius
        self.scale = scale
        self.size = (image_size[0] * scale, image_size[1] * scale)
        self.radius = image_radius * scale
        self.sound = sound
    
    def __str__(self):
        a = "OBJECT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Velocity: " + str(self.vel) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Scale: " + str(self.scale) + "\n"
        a += "Radius: " + str(self.radius) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    # Key Methods
    def update(self):
        pass
    
    def move(self):
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        
    def collide(self, obj):
        p1 = self.get_pos()
        p2 = obj.get_pos()
        distance = math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
        if distance < self.radius + obj.get_radius():
            return True
        return False
    
    def draw(self, canvas, offset):
        canvas.draw_image(self.image, self.image_center, self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_vel(self):
        return self.vel
    
    def set_vel(self, v):
        self.vel = v
    
    def get_image(self):
        return [self.image, self.image_center, self.image_size, self.image_radius]
    
    def set_image(self, i, c, s, r):
        self.image = i
        self.image_center = c
        self.image_size = s
        self.image_radius = r
        self.size = (s[0] * self.scale, s[1] * self.scale)
        self.radius = r * self.scale
        
    def get_scale(self):
        return self.scale
    
    def set_scale(self, s):
        self.scale = s
        self.size = (self.image_size[0] * s, self.image_size[1] * s)
        self.radius = self.image_radius * s
        
    def get_size(self):
        return self.size
    
    def get_radius(self):
        return self.radius
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s
    
class StableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, interval, color, scale = 1, sound = None):
        self.interval = interval
        self.color = color
        self.time = 0
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
       
    def __str__(self):
        a = "STABLE OBJECT: " + "\n"
        a += "Interval: " + str(self.interval) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Time: " + str(self.time) + "\n"
        a += "\n"
        return Object.__str__(self) + a
        
    # Key Methods
    def update(self):
        self.time += 1
        if self.time >= self.interval:
            self.vel[0] *= -1
            self.vel[1] *= -1
            self.time = 0
        self.move()
            
    def next_pos(self):
        if self.time + 1 == self.interval:
            return [self.pos[0] - self.vel[0], self.pos[1] - self.vel[1]]
        return [self.pos[0] + self.vel[0], self.pos[1] + self.vel[1]]
    
    # Accessor Methods
    def get_interval(self):
        return self.interval
    
    def set_interval(self, i):
        self.interval = i
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
        
    def get_time(self):
        return self.time
    
    def set_time(self, t):
        self.time = t
        
class Treat(StableObject):
    def __init__(self, pos, image, image_center, image_size, image_radius, color, platforms, collected = False, scale = 1, sound = None):
        # Platforms can be a list or None
        self.platforms = platforms
        self.collected = collected
        StableObject.__init__(self, pos, [0, .5], image, image_center, image_size, image_radius, 15, color, scale, sound)
        
    def __str__(self):
        a = "TREAT:" + "\n"
        a += "Platforms: " + str(self.platforms) + "\n"
        a += "Collected: " + str(self.collected) + "\n"
        return StableObject.__str__(self) + a + "\n"
        
    # Key Methods
    def collect(self):
        self.collected = True
        if self.platforms != None:
            for p in self.platforms:
                p.activate()
                
    def drop(self):
        self.collected = False
        if self.platforms != None:
            for p in self.platforms:
                p.deactivate()
                
    def draw(self, canvas, offset, visible = False):
        if not self.collected or visible:
            if self.vel[1] < 0:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1] + self.image_size[1] + 1], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            else:
                canvas.draw_image(self.image, [self.image_center[0] + self.color * self.image_size[0] + self.color, self.image_center[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
            
    def collide(self, obj):
        if not self.collected:
            if Object.collide(self, obj):
                if type(obj) == Animal:
                    obj.collect(self)
                return True
        return False
        
    # Accessor Methods
    def get_platforms(self):
        return self.platforms
    
    def set_platforms(self, p):
        self.platforms = p
        
    def get_collected(self):
        return self.collected
    
    def set_collected(self, c):
        self.collected = c
        
    def switch_collected(self):
        self.collected = not self.collected
        return self.collected
        
class Platform(StableObject):
    def __init__(self, points, vel, image, image_center, image_size, interval, color, active = False, on = True, sound = None):
        self.active = active
        self.on = on
        self.orig_state = [active, on]
        self.orig_vel = [vel[0], vel[1]]
        self.points = points
        self.orig_points = [[points[0][0], points[0][1]], [points[1][0], points[1][1]]]
        self.dimensions = [points[1][0] - points[0][0], image_size[1]]
        pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        self.orig_pos = [(points[0][0] + points[1][0]) / 2.0, (points[0][1] + points[1][1]) / 2.0]
        StableObject.__init__(self, pos, vel, image, image_center, image_size, points[1][0] - points[0][0], interval, color, 1, sound)
        
    def __str__(self):
        a = "PLATFORM:" + "\n"
        a += "Active: " + str(self.active) + "\n"
        a += "On: " + str(self.on) + "\n"
        a += "Original State: " + str(self.orig_state) + "\n"
        a += "Original Velocity: " + str(self.orig_vel) + "\n"
        a += "Points: " + str(self.points) + "\n"
        a += "Original Points: " + str(self.orig_points) + "\n"
        a += "Dimensions: " + str(self.dimensions) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
        
    # Key Methods
    def update(self):
        if self.active:
            StableObject.update(self)
            
    def move(self):
        if self.active:
            self.points[0][0] += self.vel[0]
            self.points[0][1] += self.vel[1]
            self.points[1][0] += self.vel[0]
            self.points[1][1] += self.vel[1]
            StableObject.move(self)
            
    def next_points(self):
        if self.time + 1 == self.interval and self.active:
            return [[self.points[0][0] - self.vel[0], self.points[0][1] - self.vel[1]], [self.points[1][0] - self.vel[0], self.points[1][1] - self.vel[1]]]
        elif self.active:
            return [[self.points[0][0] + self.vel[0], self.points[0][1] + self.vel[1]], [self.points[1][0] + self.vel[0], self.points[1][1] + self.vel[1]]]
        return self.points
            
    def collide(self, unstable_obj):
        """Determines if an object will fall through the platform the next time it moves"""
        if unstable_obj.get_vel()[1] > 0 and self.on:
            p = [unstable_obj.get_pos()[0], unstable_obj.get_pos()[1] + unstable_obj.get_radius()]
            p2 = [unstable_obj.next_pos()[0], unstable_obj.next_pos()[1] + unstable_obj.get_radius()]
            if p[1] <= self.points[0][1]:
                if self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() or self.points[0][1] - p[1] <= unstable_obj.get_vel()[1] + unstable_obj.get_gravity() - self.vel[1]:
                    if p[0] >= self.points[0][0] and p[0] <= self.points[1][0] or p2[0] >= self.points[0][0] and p2[0] <= self.points[1][0]:
                        unstable_obj.set_vel([unstable_obj.get_vel()[0], 0])
                        unstable_obj.set_pos([unstable_obj.get_pos()[0], self.next_points()[0][1] - unstable_obj.get_radius() - 1])
                        if self.active:
                            unstable_obj.set_bonus_vel(self.vel[0])      
                        unstable_obj.set_num_jumps(0)
                        return True
        return False
    
    def draw(self, canvas, offset):
        if self.on:
            c = self.image_center[1]
        else:
            c = self.image_center[1] + self.image_size[1]
        # Center
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]), c], [self.image_size[0] - 12, self.image_size[1]], [self.pos[0] + offset[0], self.pos[1] + offset[1] + self.image_size[1] / 2.0], self.dimensions)
        # Left
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) - self.image_size[0] / 2.0 + 3, c], [6, self.image_size[1]], [self.points[0][0] + offset[0], self.points[0][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        # Right
        canvas.draw_image(self.image, [self.image_center[0] + (self.color * self.image_size[0]) + self.image_size[0] / 2.0 - 3, c], [6, self.image_size[1]], [self.points[1][0] + offset[0], self.points[1][1] + offset[1] + self.image_size[1] / 2.0], [6, self.dimensions[1]])
        
    def activate(self):
        self.active = True
        self.on = True
        
    def deactivate(self):
        self.active = self.orig_state[0]
        self.on = self.orig_state[1]
        
    def reset_points(self):
        self.points = [[self.orig_points[0][0], self.orig_points[0][1]], [self.orig_points[1][0], self.orig_points[1][1]]]
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [self.orig_vel[0], self.orig_vel[1]]
        self.time = 0
        
    # Accessor Methods
    def get_active(self):
        return self.active
    
    def set_active(self, a):
        self.active = a
        
    def switch_active(self):
        self.active = not self.active
        return self.active
    
    def get_on(self):
        return self.on
    
    def set_on(self, o):
        self.on = o
        
    def switch_on(self):
        self.on = not self.on
        return self.on
    
    def get_points(self):
        return self.points
    
    def set_points(self, p):
        self.points = p
        self.pos = [(p[0][0] + p[1][0]) / 2.0, (p[0][1] + p[1][1]) / 2.0]
        self.dimensions = [p[1][0] - p[0][0], self.image_size[1]]
        
    def set_pos(self, p):
        n = p[0] - self.pos[0]
        self.set_points([[self.points[0][0] + n, p[1]], [self.points[1][0] + n, p[1]]])
        
    def get_orig_state(self):
        return self.orig_state
    
    def set_orig_state(self, o):
        self.orig_state = o
        
    def get_dimensions(self):
        return self.dimensions
    
    def set_dimensions(self, d):
        self.dimensions = d
        
    def get_orig_points(self):
        return self.orig_points
    
    def set_orig_points(self, o):
        self.orig_points = o
        
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, o):
        self.orig_pos = o
        
    def get_orig_vel(self):
        return self.orig_vel
    
    def set_orig_vel(self, v):
        self.orig_vel = v
    
class PeriodicImage(StableObject):
    def __init__(self, pos, vel, image, image_center, image_size, interval, wait, tiles, rotation = 0, rotation_speed = 0, bonus = False, scale = 1, sound = None):
        self.wait = wait
        self.tiles = tiles
        self.rotation = rotation
        self.rotation_speed = rotation_speed
        self.bonus = bonus
        self.r = rotation
        self.t = 0
        self.tile = 0
        StableObject.__init__(self, pos, vel, image, image_center, image_size, image_size[1], interval, "White", scale, sound)
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        
    def __str__(self):
        a = "PERIODIC IMAGE: " + "\n"
        a += "Wait: " + str(self.wait) + "\n"
        a += "Tiles: " + str(self.tiles) + "\n"
        a += "Rotation: " + str(self.rotation) + "\n"
        a += "Rotation Speed: " + str(self.rotation_speed) + "\n"
        a += "Bonus: " + str(self.bonus) + "\n"
        a += "r: " + str(self.r) + "\n"
        a += "t: " + str(self.t) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "\n"
        return StableObject.__str__(self) + a
    
    def draw(self, canvas):
        self.update()
        canvas.draw_image(self.image, [self.image_center[0] + self.tile * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r)
        if self.bonus:
            canvas.draw_image(self.image, [self.image_center[0] + (self.tile + 3) * self.image_size[0], self.image_center[1]], self.image_size, self.pos, self.size, self.r + .9)
        self.t += 1
        if self.t == self.wait:
            self.tile = (self.tile + 1) % self.tiles
            self.t = 0
            self.r += self.rotation_speed
    
class UnstableObject(Object):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction = 0, scale = 1, sound = None):
        self.gravity = gravity
        self.speed = speed
        self.jump_height = jump_height
        self.direction = direction
        self.bonus_vel = 0
        self.num_jumps = 0
        self.max_jumps = 2
        self.tile = [0, 0]
        self.count = 0
        self.moving = False
        Object.__init__(self, pos, vel, image, image_center, image_size, image_radius, scale, sound)
    
    def __str__(self):
        a = "UNSTABLE OBJECT: " + "\n"
        a += "Gravity: " + str(self.gravity) + "\n"
        a += "Speed: " + str(self.speed) + "\n"
        a += "Jump Height: " + str(self.jump_height) + "\n"
        a += "Direction: " + str(self.direction) + "\n"
        a += "Bonus Velocity: " + str(self.bonus_vel) + "\n"
        a += "Num Jumps: " + str(self.num_jumps) + "\n"
        a += "Max Jumps: " + str(self.max_jumps) + "\n"
        a += "Tile: " + str(self.tile) + "\n"
        a += "Count: " + str(self.count) + "\n"
        a += "Moving: " + str(self.moving) + "\n"
        a += "\n"
        return Object.__str__(self) + a
    
    # Key Methods
    def update(self):
        self.move()
    
    def move(self):
        self.vel[1] += self.gravity
        self.vel[0] = self.direction * self.speed + self.bonus_vel
        self.bonus_vel = 0
        Object.move(self)
        
    def next_pos(self):
        ans = [0, 0]
        ans[1] = self.pos[1] + self.vel[1] + self.gravity
        ans[0] = self.pos[0] + self.vel[0]
        return ans
    
    def jump(self):
        if self.num_jumps < self.max_jumps:
            self.vel[1] = -math.sqrt(math.fabs(2 * self.gravity * self.jump_height))
            self.is_falling = True
            self.num_jumps += 1
            if self.sound != None:
                self.sound.rewind()
                self.sound.play()
    
    def draw(self, canvas, offset):
        if self.direction == -1:
            self.tile[1] = 1
        elif self.direction == 1:
            self.tile[1] = 0
        if self.num_jumps > 0:
            if self.vel[1] > 0:
                self.tile[0] = 2
            elif self.vel[1] < 0:
                self.tile[0] = 1
            else:
                self.tile[0] = 0
        elif self.direction != 0:
            if not self.moving:
                self.count = 8
                self.moving = True
            else:
                self.count += 1
            if self.count > 8:
                self.tile[0] = (self.tile[0] + 1) % 3
                self.count = 0
        else:
            self.tile[0] = 0
            self.count = 0
            self.moving = False
        
        canvas.draw_image(self.image, [self.image_center[0] + self.tile[0] * self.image_size[0], self.image_center[1] + self.tile[1] * self.image_size[1]], self.image_size, [self.pos[0] + offset[0], self.pos[1] + offset[1]], self.size)
    
    # Accessor Methods
    def get_gravity(self):
        return self.gravity
    
    def set_gravity(self, g):
        self.gravity = g
        
    def get_speed(self):
        return self.get_speed
    
    def set_speed(self, s):
        self.speed = s
        
    def get_jump_height(self):
        return self.jump_height
    
    def set_jump_height(self, j):
        self.jump_height = j
    
    def get_direction(self):
        return self.direction
    
    def set_direction(self, d):
        self.direction = d
        
    def get_bonus_vel(self):
        return self.bonus_vel
    
    def set_bonus_vel(self, v):
        self.bonus_vel = v
        
    def get_num_jumps(self):
        return self.num_jumps
    
    def set_num_jumps(self, n):
        self.num_jumps = n
        
    def get_max_jumps(self):
        return self.max_jumps
    
    def set_max_jumps(self, m):
        self.max_jumps = m
        
    def get_tile(self):
        return self.tile
    
    def set_tile(self, t):
        self.tile = t
        
    def get_count(self):
        return self.count
    
    def set_count(self, c):
        self.count = c
        
    def get_moving(self):
        return self.moving
        
    def set_moving(self, m):
        self.moving = m
        
class Animal(UnstableObject):
    def __init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, controls, direction = 0, scale = 1, num_treats = 2, sound = None):
        self.treats = [None, None]
        self.num_treats = num_treats
        self.treats = []
        for i in range(self.num_treats):
            self.treats.append(None)
        # 0 = left, 1 = right, 2 = jump, 3 = throw
        self.controls = controls
        self.control_state = [False, False, False, False]
        self.orig_pos = [pos[0], pos[1]]
        UnstableObject.__init__(self, pos, vel, image, image_center, image_size, image_radius, gravity, speed, jump_height, direction, scale, sound)
        
    def __str__(self):
        a = "ANIMAL:" + "\n"
        a += "Num Treats: " + str(self.num_treats) + "\n"
        a += "Treats: " + str(self.treats) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        a += "Control State: " + str(self.control_state) + "\n"
        a += "Original Position: " + str(self.orig_pos) + "\n"
        a += "\n"
        return UnstableObject.__str__(self) + a
        
    # Key Methods        
    def reset(self):
        self.pos = [self.orig_pos[0], self.orig_pos[1]]
        self.vel = [0, 0]
        self.direction = 0
        self.clear_treats()
        self.control_state = [False, False, False, False]
        self.num_jumps = 0
    
    def collect(self, treat):
        t = self.treats[0]
        if t != None:
            t.drop()
        self.treats.pop(0)
        self.treats.append(treat)
        treat.collect()
        return t
     
    def drop_treat(self):
        popped = False
        for i in range(self.num_treats):
            if self.treats[i] != None and not popped:
                self.treats[i].drop()
                self.treats.pop(i)
                self.treats.insert(i, None)
                popped = True
    
    def key_handler(self, key, sign):
        for i in range(0, 4):
            if key == simplegui.KEY_MAP[self.controls[i]]:
                if sign == 'down':
                    self.control_state[i] = True
                    self.update_direction()
                elif sign == 'up':
                    self.control_state[i] = False
                    self.update_direction()
                else:
                    print(sign)
                    print("Error: Animal.key_handler(): incorrect sign")
                    
    def update_direction(self):
        if self.control_state[0] and not self.control_state[1]:
            self.direction = -1
        elif not self.control_state[0] and self.control_state[1]:
            self.direction = 1
        else:
            self.direction = 0
        if self.control_state[2]:
            self.jump()
            self.control_state[2] = False
        if self.control_state[3]:
            self.drop_treat()
            self.control_state[3] = False
            
    # Accessor Methods
    def get_treats(self):
        return self.treats
    
    def clear_treats(self):
        for i in range(0, len(self.treats)):
            self.drop_treat() 
            
    def get_num_treats(self):
        return self.num_treats
    
    def set_num_treats(self, n):
        self.num_treats = n
        self.clear_treats()
    
    def get_orig_pos(self):
        return self.orig_pos
    
    def set_orig_pos(self, p):
        self.orig_pos = p
  



import codeskulptor


# -----------------------
# Images and Sound
# -----------------------

# Sound
menu_music = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Menu.m4a"))
arcade_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Arcade.m4a"))
arcade_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_ArcadeMid.m4a"))
puzzle_music1 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 
puzzle_music2 = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Music_Puzzle.m4a")) 

bounce_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Bounce.m4a"))
brring_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Brring.m4a"))
button_sound = simplegui.load_sound(codeskulptor.file2url("assets-bunnyadventure-Sfx_Button.m4a"))

bounce_sound = None
button_sound = None

# Images
fixed_text_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Font.png"))
button_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Buttons.png"))
minibutton_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Minibuttons.png"))
platform_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Platforms.png")),simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_BasicPlatforms.png"))]
animal_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Bunnies.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Squirrel.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_PlainBall.png"))]
treat_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Carrots.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_Acorns.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Object_Image_TreatBalls.png"))]
sparkle_images = [simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Sparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_RedSparkles.png")), simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_BlueSparkles.png"))]
star_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Image_Star.png"))

title_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Title.png"))
instructions_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Instructions.png"))
arcade_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Arcade.png"))
level_select_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelSelect.png"))
high_scores_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_HighScores.png"))
options_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Options.png"))
credits_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_Credits.png"))
new_high_score_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_NewHighScore.png"))

easy_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Easy.png"))
medium_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Medium.png"))
hard_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Hard.png"))
paused_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Game_Screen_Pause.png"))

game_over_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_GameOver.png"))
win_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_ArcadeWin.png"))
level_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_LevelWin.png"))
final_screen_image = simplegui.load_image(codeskulptor.file2url("assets-bunnyadventure-Menu_Screen_AllWin.png"))

# -----------------------
# Class Definitions
# -----------------------
       
class Menu:
    def __init__(self, screen, buttons = []):
        self.buttons = buttons
        self.screen = screen
        self.index = [0, 0]
        if self.buttons != None:
            self.buttons[0][0].set_selected(True)
     
    def __str__(self):
        a = "MENU:" + "\n"
        a += "Index: " + str(self.index) + "\n"
        a += "    Buttons: " + "\n"
        for c in self.buttons:
            for b in c:
                a += str(b)
        a += "    Screen: " + "\n" + str(self.screen)
        a += "\n"
        return a
            
    def draw(self, canvas):
        self.screen.draw(canvas)
        for l in self.buttons:
            for b in l:
                b.draw(canvas)
                   
    def keyhandler(self, key):
        if key == simplegui.KEY_MAP['down']:
            if self.index[0] < len(self.buttons) - 1:
                self.set_cur_button(False)
                self.index[0] += 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['up']:
            if self.index[0] > 0:
                self.set_cur_button(False)
                self.index[0] -= 1
                while self.index[1] > len(self.buttons[self.index[0]]) - 1:
                    self.index[1] -= 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['right']:
            if self.index[1] < len(self.buttons[self.index[0]]) - 1:
                self.set_cur_button(False)
                self.index[1] += 1
                self.set_cur_button(True)
        elif key == simplegui.KEY_MAP['left']:
            if self.index[1] > 0:
                self.set_cur_button(False)
                self.index[1] -= 1
                self.set_cur_button(True)
        elif key == 13:
            self.activate_cur_button()
               
    def click(self, pos):
        for a in self.buttons:
            for b in a:
                b.set_selected(False)
                if b.in_button(pos):
                    b.activate()
                    b.set_selected(True)
                
    def get_screen(self):
        return self.screen
    
    def set_screen(self, s):
        self.screen = s
        
    def get_buttons(self):
        return self.buttons
        
    def set_buttons(self, b):
        self.buttons = b
        self.index = [0, 0]
        self.set_cur_button(True)
        
    def get_index(self):
        return self.index
    
    def set_index(self, i):
        self.index = i
        
    def set_cur_button(self, b):
        self.buttons[self.index[0]][self.index[1]].set_selected(b)
        
    def activate_cur_button(self):
        self.buttons[self.index[0]][self.index[1]].activate()
        
class Screen:
    def __init__(self, images, stable_objects, text):
        #[image, center_source, width_height_source, center_dest, width_height_dest, rotation]
        self.images = images
        self.stable_objects = stable_objects
        self.text = text
    
    def __str__(self):
        a = "SCREEN:" + "\n"
        a += "Images: " + str(self.images) + "\n"
        if self.stable_objects != None:
            a += "    Stable Objects: " + "\n"
            for s in self.stable_objects:
                a += str(s)
        else:
            a += "Stable Objects: None" + "\n"
        if self.text != None:
            a += "    Text: " + "\n"
            for t in self.text:
                a += str(t)
        else:
            a += "Text: None" + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if self.images != None:
            for i in self.images:
                canvas.draw_image(i[0], i[1], i[2], i[3], i[4], i[5])
        if self.stable_objects != None:
            for s in self.stable_objects:
                s.update()
                if type(s) == PeriodicImage:
                    s.draw(canvas)
                else:
                    s.draw(canvas, [0, 0])
        if self.text != None:
            for t in self.text:
                t.draw(canvas)
 
    def get_images(self):
        return self.images
    
    def set_images(self, i):
        self.images = i
        
    def get_stable_objects(self):
        return self.stable_objects
    
    def set_stable_objects(self, s):
        self.stable_objects = s
        
    def get_text(self):
        return self.text
    
    def set_text(self, t):
        self.text = t
                
class Text:
    def __init__(self, text_list, pos, size, color, grid = False):
        self.text_list = text_list
        self.pos = pos
        self.size = size
        self.color = color
        self.grid = grid
        self.fixed_text = fixed_text_image
        self.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .:0123456789_"
     
    def __str__(self):
        a = "TEXT:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Text List: " + str(self.text_list) + "\n"
        a += "Size: " + str(self.size) + "\n"
        a += "Color: " + str(self.color) + "\n"
        a += "Grid: " + str(self.grid) + "\n"
        a += "\n"
        return a
        
    def draw(self, canvas):
        i = 1
        for t in self.text_list:
            y_offset = i * (self.size)
            if not self.grid:
                canvas.draw_text(t, [self.pos[0], self.pos[1] + y_offset], self.size, self.color)
            else:
                width = 20
                height = 40
                center = [12, 23]
                offset = 10
                n = 0
                while n < len(t):
                    canvas.draw_image(self.fixed_text, [center[0] + ((width + 4) * self.chars.index(t[n])), center[1]], [width, height], [self.pos[0] + offset, self.pos[1] + y_offset], [width, height])
                    offset += 25
                    n += 1
            i += 1
    
    def get_text_list(self):
        return self.text_list
    
    def set_text_list(self, t):
        self.text_list = t
        
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_size(self):
        return self.size
    
    def set_size(self, s):
        self.size = s
        
    def get_color(self):
        return self.color
    
    def set_color(self, c):
        self.color = c
      
class Button:
    def __init__(self, pos, image, image_center, image_size, action):
        self.pos = pos
        self.image = image
        self.image_center = image_center
        self.image_size = image_size
        self.action = action
        self.selected = False
        self.sound = button_sound
    
    def __str__(self):
        a = "BUTTON:" + "\n"
        a += "Position: " + str(self.pos) + "\n"
        a += "Image: " + str(self.image) + "\n"
        a += "Action: " + str(self.action) + "\n"
        a += "Selected: " + str(self.selected) + "\n"
        a += "Sound: " + str(self.sound) + "\n"
        a += "\n"
        return a
    
    def draw(self, canvas):
        if not self.selected:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size)
        else:
            canvas.draw_image(self.image, [self.image_center[0], self.image_center[1] + self.image_size[1]], self.image_size, self.pos, self.image_size)
        
    def activate(self):
        if self.sound != None:
            self.sound.rewind()
            self.sound.play()
        self.action()
    
    def in_button(self, pos):
        if pos[0] < self.pos[0] + self.image_size[0] / 2 and pos[0] > self.pos[0] - self.image_size[0] / 2:
            if pos[1] < self.pos[1] + self.image_size[1] / 2 and pos[1] > self.pos[1] - self.image_size[1] / 2:
                return True
        return False
    
    def get_pos(self):
        return self.pos
    
    def set_pos(self, p):
        self.pos = p
        
    def get_image(self):
        return self.image
    
    def get_image_center(self):
        return self.image_center
    
    def get_image_size(self):
        return self.image_size
    
    def set_image(self, i, c, s):
        self.image = i
        self.image_center = c
        self.image_size = s
        
    def get_action(self):
        return self.action
    
    def set_action(self, a):
        self.action = a
       
    def get_selected(self):
        return self.selected
    
    def set_selected(self, s):
        self.selected = s
        
    def switch_selected(self):
        self.selected = not self.selected
        return self.selected
    
    def get_sound(self):
        return self.sound
    
    def set_sound(self, s):
        self.sound = s

class Game:
    def __init__(self, level, controls, theme):
        
        self.easy_screen = Screen([[easy_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.medium_screen = Screen([[medium_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.hard_screen = Screen([[hard_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        paused_screen = Screen([[paused_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        self.platform_images = platform_images
        self.animal_images = animal_images
        self.treat_images = treat_images
        resume_button = Button([300, 350], button_image, [3875, 50], [251, 100], lambda : self.unpause())
        return_button = Button([600, 350], button_image, [125, 50], [251, 100], lambda : self.return_to_title())
        self.pause_menu = Menu(paused_screen, [[resume_button, return_button]])
            
        self.animal = None
        self.theme_index = theme
        self.controls = controls
        self.yellow_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[0], [34, 35], [70, 70], 1, 3, 7, 0, .05, True, 1.5)
        self.pink_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[1], [34, 35], [70, 70], 1, 3, 7, math.pi / 3, .05, True, 1.5)
        self.blue_sparkle = PeriodicImage([150, 150], [0, 0], sparkle_images[2], [34, 35], [70, 70], 1, 3, 7, 2 * math.pi / 3, .05, True, 1.5)
        self.sparkles = [self.yellow_sparkle, self.pink_sparkle, self.blue_sparkle]
        
        self.goal_sound = brring_sound
        
        self.camera_offset = [0, 0]
        self.levels = []
        self.next_level_timer = simplegui.create_timer(1000, self.level_end)
        
        self.level = level
        self.level_max = 900
        self.treats = []
        self.platforms = []
        self.text = None
        self.screen = None
        
        self.in_level = False
        self.is_ending = False
        self.paused = False
        self.start_game()
    
    def __str__(self):
        a = "GAME:" + "\n"
        a += "Level: " + str(self.level) + "\n"
        a += "In Level: " + str(self.in_level) + "\n"
        a += "Is Ending: " + str(self.is_ending) + "\n"
        a += "Paused: " + str(self.paused) + "\n"
        a += "Theme Index: " + str(self.theme_index) + "\n"
        a += "Controls: " + str(self.controls) + "\n"
        return a
    
    def create_levels(self):
        self.levels = []
        for i in range(31):
            self.levels.append([["Platforms"], ["Treats"], "Text"])
            
        treat_scale = 1.2
        text_color = "Black"

        self.levels[0][0] = [14, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[190, 218], [294, 218]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[566, 220], [668, 220]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[577, -94], [682, -94]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[582, -413], [689, -413]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[597, -730], [690, -730]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[182, -86], [299, -86]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[184, -402], [305, -402]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[186, -724], [310, -724]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 1, True, True, [[405, 130], [483, 130]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[411, -165], [477, -165]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[438, -488], [496, -488]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[444, -854], [500, -854]], [0, -0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, True, True, [[375, -1099], [561, -1099]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[0][1] = [1, [467, -1302], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[0][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        
        self.levels[1][0] = [1, [[350, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[1][1] = [1, [600, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[1][2] = ["Use the '" + self.controls[0] + "' and '" + self.controls[1] + "' keys to move!", [200, 400], 30, text_color]
        self.levels[2][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 350], [800, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[2][1] = [1, [700, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[2][2] = ["Jump using the '" + self.controls[2] + "' key!", [250, 400], 30, text_color]
        self.levels[3][0] = [2, [[350, 350], [550, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[700, 350], [900, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[3][1] = [1, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[3][2] = ["Tap '" + self.controls[2] + "' again while in the air to double-jump!", [200, 400], 30, text_color]
        self.levels[4][0] = [2, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[408.5, 178], [493.5, 178]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[4][1] = [1, [455, -29.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1], False, treat_scale]
        self.levels[4][2] = ["Wait for the second jump until you start to fall!", [100, 450], 30, text_color]
        self.levels[5][0] = [4, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[524, 242], [633, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[670, 84], [756, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[970, 90], [1050, 90]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[5][1] = [1, [1049, -109], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3], False, treat_scale]
        self.levels[5][2] = ["You can go further than you think!", [300, 450], 30, text_color]
        self.levels[6][0] = [2, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False]
        self.levels[6][1] = [2, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale]
        self.levels[6][2] = ["Obtain the treats to affect similarly colored platforms!", [10, 400], 30, text_color]
        self.levels[7][0] = [3, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[650, 350], [800, 350]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[1100, 350], [1300, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[7][1] = [2, [1200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [550, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale]
        self.levels[7][2] = ["Some platforms move when activated!", [200, 400], 30, text_color]
        self.levels[8][0] = [4, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[650, 350], [800, 350]], [.5, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, False, [[1100, 650], [1300, 650]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[8][1] = [3, [450, 50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [350, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [1200, 600], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[8][2] = ["There can be more than one treat and platform!", [50, 400], 30, text_color]
        self.levels[9][0] = [7, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 300], [700, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[750, 300], [850, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[900, 300], [1000, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[1050, 300], [1150, 300]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[1300, 0], [1400, 0]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1200, 300], [1300, 300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[9][1] = [3, [350, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 2, 3], False, treat_scale, [1250, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [1350, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[9][2] = ["You can pause at any time by pressing the 'p' key!", [400, 400], 30, text_color]
        self.levels[10][0] = [6, [[300, 350], [600, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[600, 200], [700, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[700, 50], [800, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[800, -100], [900, -100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[900, -250], [1000, -250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, False, [[1000, -400], [1100, -400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[10][1] = [5, [550, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale, [650, 150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [1050, -450], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [750, 0], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [850, -150], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1, 4], False, treat_scale]
        self.levels[10][2] = ["You can only hold 2 treats at a time!", [200, 400], 30, text_color]
        self.levels[11][0] = [5, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[399, 217], [508, 217]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[301, 64], [383, 64]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[164, -69], [258, -69]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[163, -240], [258, -240]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[11][1] = [5, [210, -429.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [328, 364], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [577, 361], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [450, 87.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [343, -26.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale]
        self.levels[11][2] = ["Sometimes the treats form a puzzle!", [200, 450], 30, text_color]
        self.levels[12][0] = [8, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[210, 275], [340, 275]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[551, 278], [668, 278]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[348, 135], [550, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[217, -1], [338, -1]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[555, -5], [666, -5]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[346, -149], [552, -149]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[397.5, -307], [494.5, -307]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[12][1] = [5, [443, -437.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 3, 6], False, treat_scale, [529, 106.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [362, 108], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4], False, treat_scale, [364, 376.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 7], False, treat_scale, [530, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[12][2] = ["The solution might not be obvious right away!", [150, 450], 30, text_color]
        self.levels[13][0] = [2, [[350, 400], [1200, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1056, 222], [1165, 222]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[13][1] = [5, [541, 340], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [699, 372], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [999, 368], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [857, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [1117, 99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[13][2] = ["You may not want to get every treat!", [300, 450], 30, text_color]
        self.levels[14][0] = [7, [[249, 410], [649, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[259, 224], [352, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[552, 224], [640, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[573, 55], [657, 55]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[254, 52], [350, 52]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[388, -66], [501, -66]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[392, -253], [497, -253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False]
        self.levels[14][1] = [5, [558, 370.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [617, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale, [353, 383], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [279, 382], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3, 6], False, treat_scale, [442, -431.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 5], False, treat_scale]
        self.levels[14][2] = ["You can use the '" + self.controls[3] + "' key to drop unwanted treats!", [50, 450], 30, text_color]
        self.levels[15][0] = [5, [[200, 350], [700, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[400, 250], [500, 250]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[400, 50], [500, 50]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[50, 350], [150, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[750, 350], [850, 350]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[15][1] = [5, [450, -50], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [650, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [1], False, treat_scale, [100, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [250, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [3], False, treat_scale, [800, 310], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale]
        self.levels[15][2] = ["Good luck!", [370, 400], 30, text_color]
        self.levels[16][0] = [6, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[437, 257], [557, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[437, 99], [549, 99]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[88, 283], [214, 283]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-133, 166], [-7, 166]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-359, 48], [-218, 48]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[16][1] = [4, [625, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [551, 366.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [1, 4], False, treat_scale, [487, -99], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [-288, -127], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[16][2] = ["", [300, 600], 30, "Silver"]
        self.levels[17][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[560, 86], [648, 86]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[676, 399], [822, 399]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 2, False, True, [[678, 88], [859, 88]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 3, False, True, [[350, 87], [505, 87]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 4, False, True]
        self.levels[17][1] = [4, [282, 350], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale, [598, -56], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [3], False, treat_scale, [1052, -127.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [41, -67.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[17][2] = ["", [300, 600], 30, "Silver"]
        self.levels[18][0] = [11, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-181, 399], [-92, 399]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1003, 410], [1078, 410]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[371, 135], [525, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[247, 670], [669, 670]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-45, 408], [183, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[687, 421], [981, 421]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[368, 545], [528, 545]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[381, 267], [518, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[77, 728], [260, 728]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-195, 731], [-128, 731]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 6, False, False]
        self.levels[18][1] = [7, [447, 636.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-141, 349.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [7], False, treat_scale, [611, 369], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [6], False, treat_scale, [275, 373], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [5], False, treat_scale, [453, 34.41408904452442], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [261, 646.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9], False, treat_scale, [-48, 672], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [10], False, treat_scale]
        self.levels[18][2] = ["", [300, 600], 30, "Silver"]
        self.levels[19][0] = [5, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[114, 668], [243, 668]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[120, 492], [234, 492]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[972, 91], [1052, 91]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[681, 109], [832, 109]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True]
        self.levels[19][1] = [4, [1010, 63.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [117, 631], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4], False, treat_scale, [237, 632.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [272, 359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale]
        self.levels[19][2] = ["", [300, 600], 30, "Silver"]
        self.levels[20][0] = [9, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[404, 676], [465, 676]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[759, 685], [887, 685]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-8, 682], [110, 682]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[154, 535], [312, 535]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[584, 546], [766, 546]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[369, 212], [548, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[203, 869], [264, 869]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[578, 873], [633, 873]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[20][1] = [6, [825, 633.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [5], False, treat_scale, [38, 636], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 641.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [6, 7, 8], False, treat_scale, [465, 91.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [232, 840], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [606, 844], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale]
        self.levels[20][2] = ["", [300, 600], 30, "Silver"]
        self.levels[21][0] = [7, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[416.5, 272], [499.5, 272]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[533, 182], [649, 182]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[682.5, 88], [789.5, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[262, 181], [372, 181]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[133, 89], [247, 89]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[429, 87], [487, 87]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 7, False, False]
        self.levels[21][1] = [7, [269, 107.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [629, 102.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [524, 377.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [1], False, treat_scale, [764, 7], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4], False, treat_scale, [109, 17], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [6], False, treat_scale, [448, -171.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [504, 237.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [2], False, treat_scale]
        self.levels[21][2] = ["", [300, 600], 30, "White"]
        self.levels[22][0] = [13, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[610, 501], [773, 501]], [1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 4, False, True, [[767, 400], [907, 400]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 5, False, True, [[619, 270], [771, 270]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 2, False, True, [[93, 271], [240, 271]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 7, False, True, [[-19, 397], [121, 397]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 3, False, True, [[77, 502], [279, 502]], [-1, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, True, [[372, 222], [521, 222]], [0, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 1, False, True, [[377, -71], [516, -71]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-336, 727], [-257, 727]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-243, 654], [-150, 654]], [1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 7, False, False, [[1109, 754], [1193, 754]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[1062, 638], [1144, 638]], [-1, -1], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 2, False, False]
        self.levels[22][1] = [8, [322, 399], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [5], False, treat_scale, [380, 405.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [1], False, treat_scale, [539, 407.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [605, 394.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [1002, 697], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3, 12], False, treat_scale, [980, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [7], False, treat_scale, [441, -312.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-303, 661], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [4, 10], False, treat_scale]
        self.levels[22][2] = ["", [300, 600], 30, "Silver"]
        self.levels[23][0] = [15, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[332, 286], [549, 286]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[137, 135], [290, 135]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[554, 132], [706, 132]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-91, 123], [31, 123]], [0, 1.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 160, 3, False, True, [[-308, 120], [-155, 120]], [0, 0.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 480, 3, False, True, [[-476, 142], [-365, 142]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 3, False, True, [[-668, 427], [-537, 427]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[789, 132], [1053, 132]], [0, 1], self.platform_images[self.theme_index], [25, 6], [50, 12], 240, 4, False, True, [[1120, 408], [1304, 408]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1329, 224], [1403, 224]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1512, 123], [1619, 123]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[1705, -7], [1781, -7]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[-5, 460], [130, 460]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-319, 463], [-258, 463]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[23][1] = [8, [334, 251], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [2], False, treat_scale, [530, 244], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [3], False, treat_scale, [128, 55], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [4, 5, 6], False, treat_scale, [689, 55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [8], False, treat_scale, [-607, 366], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [9, 10, 11, 12], False, treat_scale, [1739, -67], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [-341, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [14], False, treat_scale, [-99, 314.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [13], False, treat_scale]
        self.levels[23][2] = ["", [300, 600], 30, "Silver"]
        self.levels[24][0] = [11, [[50, 400], [850, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[14, 88], [162, 88]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[370, 94], [527, 94]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[752, 92], [876, 92]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[532, 253], [732, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[147, 244], [369, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[890, 242], [1031, 242]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[-199, 244], [-17, 244]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[541, -84], [747, -84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[134, -105], [355, -105]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[356, -226], [561, -226]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False]
        self.levels[24][1] = [8, [107, 352], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [6], False, treat_scale, [259, 358.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [7, 9], False, treat_scale, [618, 362], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [5], False, treat_scale, [799, 354], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [8], False, treat_scale, [814, 39.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [10], False, treat_scale, [78, 30.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [4], False, treat_scale, [449, 52], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [None], False, treat_scale, [464, -466], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale]
        self.levels[24][2] = ["", [300, 600], 30, "Silver"]
        self.levels[25][0] = [6, [[350, 400], [550, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[131.5, 257], [216.5, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[278, 257], [344, 257]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[539, 255], [595, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[662.5, 253], [737.5, 253]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[413, 200], [481, 200]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False]
        self.levels[25][1] = [5, [436, -55.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0], False, treat_scale, [319, 185.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [4, 3], False, treat_scale, [724, 183], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [1], False, treat_scale, [570, 185], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [2], False, treat_scale, [149, 190.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale]
        self.levels[25][2] = ["", [300, 450], 30, "White"] 
        self.levels[26][0] = [18, [[250, 400], [650, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[181, 519], [431, 519]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[487, 521], [701, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-73, 520], [115, 520]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[92, 621], [198, 621]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[411, 626], [510, 626]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[773, 522], [981, 522]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[693, 627], [795, 627]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[37, 396], [168, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-89, 221], [25, 221]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[138, 220], [281, 220]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[591, 212], [737, 212]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[867, 208], [1003, 208]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[754, 396], [888, 396]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[4, 80], [148, 80]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[270, 79], [630, 79]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[726, 84], [894, 84]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[150, -78], [738, -78]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[26][1] = [7, [741, 598], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [16], False, treat_scale, [740, 559], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [10, 11], False, treat_scale, [460, 603], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [12, 14], False, treat_scale, [460, 561.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [13], False, treat_scale, [145, 602.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [15], False, treat_scale, [141, 566.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8, 9], False, treat_scale, [449, -297], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[26][2] = ["", [300, 600], 30, "Silver"]
        self.levels[27][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[376, 267], [513, 267]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[391, 109], [506, 109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[-8, 398], [144, 398]], [-1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 180, 5, False, False, [[-501, 255], [-345, 255]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[734, 404], [910, 404]], [1, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 300, 6, False, False, [[1365, 400], [1497, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[-501, 395], [-345, 395]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-31, 521], [62, 521]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[-209, 480], [-159, 480]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False]
        self.levels[27][1] = [8, [447, -33.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [3], False, treat_scale, [-426, 65.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [5], False, treat_scale, [1480, 229], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [289, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [6], False, treat_scale, [520, 369.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1, 4], False, treat_scale, [576, 360.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [2], False, treat_scale, [-190, 447.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [9], False, treat_scale, [-57, 516.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [8], False, treat_scale]
        self.levels[27][2] = ["", [300, 600], 30, "Silver"]
        self.levels[28][0] = [12, [[300, 400], [600, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[158, 233], [400, 233]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[489, 235], [709, 235]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[274, 158], [618, 158]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[493, 87], [709, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[170, 87], [404, 87]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[689, 163], [917, 163]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[775, 241], [985, 241]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-30, 157], [205, 157]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[-146, 239], [71, 239]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[384, -83], [510, -83]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, False, False, [[392, -225], [512, -225]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False]
        self.levels[28][1] = [13, [514, 206], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [11], False, treat_scale, [806, 209], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [10], False, treat_scale, [892, 214.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [336, 128], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [None], False, treat_scale, [-57, 220.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [None], False, treat_scale, [36, 209.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [183, 133], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [362, 207], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [None], False, treat_scale, [245, 211.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [551, 131.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [None], False, treat_scale, [728, 132], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [645, 212.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [None], False, treat_scale, [449, -444.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], False, treat_scale]
        self.levels[28][2] = ["", [300, 600], 30, "White"]
        self.levels[29][0] = [10, [[200, 400], [700, 400]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[342, 204], [573, 204]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True, [[141, 31], [315, 31]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 3, False, False, [[-2, -119], [196, -119]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 6, False, False, [[352, -109], [582, -109]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 2, True, False, [[602, 36], [760, 36]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 4, False, False, [[777, -120], [951, -120]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 5, False, False, [[584, -293], [768, -293]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 7, False, False, [[176, -300], [349, -300]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 1, False, False, [[346, -469], [575, -469]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 1, 0, False, True]
        self.levels[29][1] = [9, [461, -629], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale, [258, -349], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 7, [7], False, treat_scale, [678, -339], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], True, treat_scale, [867, -157.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [8], False, treat_scale, [307, 371.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [5], False, treat_scale, [225, 372.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [2], False, treat_scale, [607, 375], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 5, [6], False, treat_scale, [674, 384.5], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 6, [3], False, treat_scale, [677, -359], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [4], False, treat_scale]
        self.levels[29][2] = ["", [300, 600], 30, "Silver"]
        self.levels[30][0] = [6, [[0, 300], [200, 300]], [.5, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 60, 2, False, False, [[200, 200], [400, 200]], [0, .3], self.platform_images[self.theme_index], [25, 6], [50, 12], 200, 3, False, False, [[400, 500], [600, 500]], [0, .5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 0, False, True, [[200, 500], [400, 500]], [-.5, -.5], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 1, False, False, [[-100, 100], [0, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False, [[100, 100], [200, 100]], [0, 0], self.platform_images[self.theme_index], [25, 6], [50, 12], 120, 4, False, False]
        self.levels[30][1] = [5, [200, 300], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 2, [0], False, treat_scale, [400, 200], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 3, [1], False, treat_scale, [600, 400], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 1, [3], False, treat_scale, [600, 100], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 4, [4, 5], False, treat_scale, [-150, -25], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, [None], False, treat_scale]
        self.levels[30][2] = ["", [300, 600], 30, "White"] 
        
    def start_game(self):
        self.create_levels()
        self.animal = Animal([450, 300], [0,0], self.animal_images[self.theme_index], [22, 26], [45, 52], 21, .5, 3, 120, self.controls, 0, 1, 2, bounce_sound)
        self.get_level()
        self.in_level = True
    
    def main(self, canvas):
        pass
    
    def update(self):
        
        self.animal.update()
        
        for p in self.platforms:
            p.collide(self.animal)
            p.update()
        for t in self.treats:
            t.update()
            t.collide(self.animal)
            
        p = self.animal.get_pos()
        self.camera_offset = [450 - p[0], 300 - p[1]]
        
        if p[1] > self.level_max:
            self.reset_level()
    
    def draw(self, canvas):
        
        # Scene
        self.screen.draw(canvas)
        canvas.draw_text(self.text[0], [self.text[1][0] + self.camera_offset[0], self.text[1][1] + self.camera_offset[1]], self.text[2], self.text[3])
        
        # Objects
        self.animal.draw(canvas, self.camera_offset)
        for p in self.platforms:
            p.draw(canvas, self.camera_offset)
        for t in self.treats:
            t.draw(canvas, self.camera_offset)

        # Current Treats Box
        canvas.draw_polygon([(25, 30), (100, 30), (100, 70), (25, 70)], 5, "White")
        t = self.animal.get_treats()
        for i in range(len(t)):
            if t[i] != None:
                if t[i].get_color() == 0 and self.in_level:
                    self.in_level = False
                    self.is_ending = True
                    self.next_level_timer.start()
                    self.goal_sound.rewind()
                    self.goal_sound.play()
                    for s in self.sparkles:
                        s.set_pos([t[i].get_pos()[0] + self.camera_offset[0], t[i].get_pos()[1] + self.camera_offset[1]])
                else:
                    t[i].draw(canvas, [44 + 35 * i - t[i].get_pos()[0], 50 - t[i].get_pos()[1]], True)
                    
        # Display
        canvas.draw_text("Level: " + str(self.level), [110, 70], 40, "White")
        
        # Sparkles
        if self.is_ending:
            for s in self.sparkles:
                s.draw(canvas)

    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['P']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
            
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
    
    def keyup_handler(self, key):
        if self.in_level and not self.paused:
            self.animal.key_handler(key, 'up')
        
    def unpause(self):
        self.paused = False
        
    def level_end(self):
        pass
    
    def next_level(self):
        if self.level < len(self.levels) - 1:
            self.level += 1
            self.in_level = True
            self.animal.reset()
            self.treats = []
            self.platforms = []
            self.get_level()
    
    def reset_level(self):
        self.animal.reset()
        for p in self.platforms:
            p.reset_points()
    
    def get_level(self):
        n = 9 # number of parameters for a platform
        for i in range(self.levels[self.level][0][0]):
            self.platforms.append(Platform(self.levels[self.level][0][n*i+1], self.levels[self.level][0][n*i+2], self.levels[self.level][0][n*i+3], self.levels[self.level][0][n*i+4], self.levels[self.level][0][n*i+5], self.levels[self.level][0][n*i+6], self.levels[self.level][0][n*i+7], self.levels[self.level][0][n*i+8], self.levels[self.level][0][n*i+9]))
        n = 9 # number of parameters for a treat
        for i in range(self.levels[self.level][1][0]):
            p = []
            for x in self.levels[self.level][1][n*i+7]:
                if x == None:
                    p = None
                else:
                    p.append(self.platforms[x])
            self.treats.append(Treat(self.levels[self.level][1][n*i+1], self.levels[self.level][1][n*i+2], self.levels[self.level][1][n*i+3], self.levels[self.level][1][n*i+4], self.levels[self.level][1][n*i+5], self.levels[self.level][1][n*i+6], p, self.levels[self.level][1][n*i+8], self.levels[self.level][1][n*i+9]))
        self.text = self.levels[self.level][2]
        if self.level <= 10:
            self.screen = self.easy_screen
        elif self.level <= 20:
            self.screen = self.medium_screen
        else:
            self.screen = self.hard_screen
        
    def return_to_title(self):
        self.stop_music()
             
    def play_music(self):
        self.music1_timer.stop()
        self.music1.rewind()
        self.music1.play()
        self.music1_timer.start()
        
    def replay_music(self):
        self.music1_timer.stop()
        self.music2_timer.stop()
        self.music2.rewind()
        self.music2.play()
        self.music2_timer.start()
        
    def stop_music(self):
        self.music1.pause()
        self.music2.pause()
        self.music1_timer.stop()
        self.music2_timer.stop()
        
     
class PuzzleGame(Game):
    def __init__(self, level, runner):
        Game.__init__(self, level, ['left', 'right', 'up', 'space'], 0)
        
        g = Treat([450, 230], self.treat_images[self.theme_index], [11, 13], [22, 26], 13, 0, None, False, 1.2)
        level_screen = Screen([[level_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], [g], None)
        final_screen = Screen([[final_screen_image, [450, 300], [900, 600], [450, 300], [900, 600], 0]], None, None)
        
        next_button = Button([625, 350], button_image, [625, 50], [251, 100], self.next_level)
        replay_button = Button([275, 350], button_image, [375, 50], [251, 100], self.replay_level)
        self.level_menu = Menu(level_screen, [[replay_button, next_button]])
        self.final_menu = Menu(final_screen, [[replay_button]])
        
    def __str__(self):
        a = "PUZZLE GAME:" + "\n"
        a += "Num Levels: " + str(len(self.levels) - 1) + "\n"
        a += "\n"
        return Game.__str__(self) + a
        
    def main(self, canvas):
        if self.paused:
            self.pause_menu.draw(canvas)
        elif self.in_level:
            self.update()
            self.draw(canvas)
        elif self.is_ending:
            self.draw(canvas)
        elif self.level == len(self.levels) - 1:
            self.final_menu.draw(canvas)
        else:
            self.level_menu.draw(canvas)
        
    def keydown_handler(self, key):
        if key == simplegui.KEY_MAP['p']:
            self.paused = not self.paused
        elif self.paused:
            self.pause_menu.keyhandler(key)
        elif self.in_level:
            self.animal.key_handler(key, 'down')
        elif self.level == len(self.levels) - 1:
            self.final_menu.keyhandler(key)
        else:
            self.level_menu.keyhandler(key)
        
    def click(self, pos):
        if self.paused:
            self.pause_menu.click(pos)
        elif self.in_level:
            pass
        elif self.level == len(self.levels) - 1:
            self.final_menu.click(pos)
        else:
            self.level_menu.click(pos)
        
    def replay_level(self):
        self.reset_level()
        self.in_level = True
        
    def level_end(self):
        self.next_level_timer.stop()
        self.is_ending = False
        
         
# -----------------------
# Starting Game and Frame
# -----------------------
    
width = 900
height = 600

frame = simplegui.create_frame("Bunny's Big Adventure!", width, height, 100)

_puzzle_game = PuzzleGame(1, 0)

frame.set_draw_handler(_puzzle_game.main)
frame.set_keydown_handler(_puzzle_game.keydown_handler)
frame.set_keyup_handler(_puzzle_game.keyup_handler)
frame.set_mouseclick_handler(_puzzle_game.click)

frame.set_canvas_background("Green")
frame.start()
        
        
        
        
def deserialize(string, splitters=[' ', ';', ',']):
    lst = []
    for sub_str in string.split(splitters[0]):
        if sub_str[0] == 'T' or sub_str[0] == 'F':
            lst.append(bool(sub_str))
        elif sub_str[0] == '[' and sub_str[-1] == ']':
            lst.append(deserialize(sub_str[1:-1], splitters[1:]))
        else:
            lst.append(int(sub_str))
    return lst



